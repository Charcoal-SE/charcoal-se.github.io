{ 
  

  
    "ms-api-documentation-html": {
      "title": "API Documentation",
      "content": "Metasmoke offers a JSON API to access data about posts, reasons, and feedback. This is the documentation for said API.\n\nIf you’re looking for the WebSocket API, go here.\n\nGetting Started\nTo get started, you’ll need an API key. No application can use the API without a key - you’ll get a 403 response. To get a key, ping a metasmoke admin in chat - they’ll be able to register one for you. Have a name in mind for your app - a name is necessary to register a key. You can edit it later, so it doesn’t have to be final. Also make sure that you have an active metasmoke account - this allows the registering admin to tie the key to your account, giving you control of your app.\n\nOnce you have your key, you should include it as the key query string parameter on all requests to the API.\n\nFilters\nThe metasmoke API supports parameter-based filters (like the Stack Exchange API) so that you can filter a response down to only the fields you want.\n\nTo create a filter, visit metasmoke.erwaysoftware.com/api/filters and select the fields you want in the response. Only select the fields you need. Selecting fields from unrelated tables may break things.\n\n\n  N.B.: You can calculate filters yourself if you really want to, but you should have a thorough understanding of how to do so first. Ask ArtOfCode if you’re unsure.\n\n\nOnce you’ve got your filter, include it as the filter parameter on requests to the API that use it.\n\nYou may sometimes need to pass a blank filter (by appending ?filter= to the the URL) for all fields to be displayed.\n\nResults\n\nYou can use the per_page query string parameter to adjust how many results you get, up to a maximum of 100.\n\nThe has_more field in the response indicates if there are more results available than have been returned in this result set; use the page query string parameter to get the next page of results. ?page=1 will return the first page; ?page=2 the second, and so on.\n\nWrite Methods\nWrite methods additionally require you to go through OAuth to get hold of a write token, which can be used to authorize the write request. You should follow this flow:\n\n\n  Send your user to https://metasmoke.erwaysoftware.com/oauth/request?key=YOUR_KEY_HERE\n  If the user authorizes your app, they’ll be given a code to provide you. Ask them to enter that code, then:\n  Send an HTTP GET request to https://metasmoke.erwaysoftware.com/oauth/token?key=YOUR_KEY_HERE&amp;code=THEIR_CODE_HERE. The response is a JSON object containing one key, token, the value of which is your write token.\n\n\nWrite tokens do not expire and can be used to authorize as many requests as you need. If you get a 401 Unauthorized response when you included a write token, that token has likely been revoked by an administrator or by the user, and you need to go through OAuth again.\n\nAPI Read Routes\n\n  Post Feedback: /api/post/:id/feedback\n  Post Reasons: /api/post/:id/reasons\n  Posts by Date Range: /api/posts/between\n  Posts by Feedback: /api/posts/feedback\n  Posts by ID: /api/posts/:ids\n  Posts by Site: /api/posts/site\n  Posts by URLs: /api/posts/url\n  Posts caught by reason: /api/reason/:id/posts\n  Reasons by ID: /api/reasons/:ids\n  Search Posts: /api/posts/search\n  Undeleted Posts: /api/posts/undeleted\n  Users: /api/users\n  Valid Feedback Types: /api/post/:id/valid_feedback\n  Smoke Detectors: /api/smoke_detectors\n  Spam Last Week: /api/stats/last_week\n  Detailed Time to Deletion: api/stats/detailed_ttd\n\n\nAPI Write Routes\n\n  Create Feedback: POST /api/w/post/:id/feedback\n  Report Post: POST /api/w/post/report\n\n",
      "url": "/ms/API-Documentation"
    },
  

  
    "smokey-autoflagging-html": {
      "title": "State of the Project",
      "content": "State of the Project\n\nWe are looking into automating flags from Smokey.  Basically, it will look as if though Smokey clicks “flag” → “spam” as soon as Smoke Detector reports a post (though not all reported posts are eligible; see the Spam weight section for details.).\n\nWe are working out the specifics of the system right now, so the details are still in flux.\n\nTo participate in the development of this feature, please show up in the Charcoal HQ chat room and wait for a good moment to bring up your topic (afternoon UTC seems to be a fairly busy time in the room).\n\nThe main dashboard (status, statistics, etc) is at https://metasmoke.erwaysoftware.com/flagging\n\nTechnical details and spam weight\n\nEvery time a post is reported, it triggers a variety of different reasons for being reported (such as bad keyword, blacklisted website, etc). Each of these reasons (also known as “heuristics”) contributes to the post’s weight. The formula that determines how much weight each reason contributes is as follows:\n\n[Number of True Positives caught by reason] / [Total posts caught by the reason] * 100\n\n\n\nIn our current preliminary testing, the threshold that was set for posts to be flagged automatically is at a weight of 280. In our database of over 50,000 records, this score threshold has a predictive accuracy of 99.98% (meaning of all posts hitting 280 score caught by Smokey, 99.98% were true positives).\n\nAs with any other projection, you need to understand that past performance is no guarantee for the future.\n\nThe flagging is done by Metasmoke (the back end component) using the credentials of users who have signed up to allow the system to cast flags on their behalf.\n\nOpting In\n\nThere is a separate page about Setting up Autoflagging.  This brief section is a quick FAQ-like summary.\n\nThere is a “big red button” which you can click.  Please be patient and try again until it actually sticks!  This is a known issue which of course we hope to resolve eventually.\n\nOnce your flagging status shows as active (the button stays checked if you navigate away from the page and come back again) and your conditions are met, you are eligible to be drawn randomly when a flag is about to be raised.  This is a random selection out of the list of users whose conditions allow flagging at the given weight on the given site.\n\nYou can review the flags cast on your behalf at a URL like https://metasmoke.erwaysoftware.com/flagging/users/XX/logs (for example, Undo’s log).  There is a number of other useful links on the personal flagging dashboard where you can tweak conditions or turn off autoflagging.\n",
      "url": "/smokey/Autoflagging"
    },
  

  
    "smokey-behaviour-and-procedure-html": {
      "title": "Behaviour and Procedure",
      "content": "Standard of Behaviour\nStack Exchange has a Be Nice policy — if you’re not familiar with it, you should go and read it now.\n\nAs a SmokeDetector user, we expect everyone to abide by that policy. We also extend that standard a little: we expect that you take a professional and constructive approach to moderation, and that you’re capable of getting along with the users and administrators of SmokeDetector. Remember — getting along is not the same as liking. Additionally, the chatrooms are a professional environment — we’re friendly, so laughing and joking within reason are fine, but keep it professional.\n\nCharcoal intends to create an environment where all humans are welcome and will be treated equally regardless of personal or physical attributes or lack thereof. You can be part of this by being mindful of how what you say may be construed by others.\n\nThe unofficial standard is this:\n\n\n  If a system administrator ends up getting pinged more than once because you’re abusing the system or seriously bugging other users, your privileges are likely to be revoked.\n\n\nExercise some common sense, bring your sense of humour, and we’ll all get along just fine.\n\nBreaches of any part of this policy should in the majority of cases be reported to a Charcoal team member or by emailing smokey@charcoal-se.org. In cases where a breach also contravenes the Stack Exchange Be Nice policy, it can be reported to any Stack Exchange network moderator.\n\nExternal Liaison\nOccasionally, spam on SE sites gets handled incorrectly. Historically in these cases, a Charcoal member has often reached out to the people involved in this situation to offer advice on how spam should be handled correctly. However, as Charcoal has continued to expand, it has become more difficult to have experienced team members do this, so this is some guidance on how to approach liaising with other people or communities around the SE network.\n\nIf you’re going to go to other sites and advise people on how to deal with spam, that’s awesome, but make sure you’re doing it diplomatically. Bear in mind that you will likely have little activity on the target site, and this is the first impression many users will have of you and of Charcoal.\n\n\n  Consider necessity. It’s good to give advice, but don’t get over-invested. Remember that one mishandled spam post isn’t a disaster, and won’t bring a site to its knees.\n  Provide context. Make sure you tell your audience who you are (and if pertinent, who Charcoal are and what we do), what happened with the spam post, why that wasn’t the right outcome, and what could be done instead. Wherever you can, provide links to back up your statements so that it’s not just “some random person from outer space somewhere else on the network”.\n  Phrase what you say carefully. Avoid anything that could seem accusatory — it seems silly, but try to avoid saying you. If it seems personal, someone’ll take it personally, and won’t be able to see the real issue because they think they’ve been insulted. Instead of “You did X and you shouldn’t have!”, try “X happened to Y post, and I think this could have been done Z way instead, according to [SE policy](link to it)“. Talk about actions or posts rather than users or people.\n  Assume good faith. Even if a post has been handled incorrectly, it most likely wasn’t done out of malice. Remember that, and don’t treat people like they’re idiots for not knowing the policy.\n\n\nRemember to Be Nice at all times. If at any point you don’t feel you can start or continue a conversation diplomatically and Nicely, step back. There are plenty of other users who can help out; if necessary, call on one of the mods involved in the project — they’re used to being diplomatic with irksome users.\n",
      "url": "/smokey/Behaviour-and-Procedure"
    },
  

  
    "smokey-build-infrastructure-html": {
      "title": "Build Infrastructure",
      "content": "SmokeDetector’s build infrastructure is complex and involves quite a number of components. This is an attempt to document the process and reduce the bus factor.\n\nPrinciples\nThe idea of the build process is to enable those with SmokeDetector privileges to pull in code without having direct server access. However, doing that without any safeguards is obviously a bad idea, so there are a number of components that regulate what and when things can be pulled in.\n\n\n  CI (x2)\n  metasmoke\n  Smokey itself\n  GitHub\n  PullApprove\n\n\nFlow\nCI\nCI — Continuous Integration — runs Smokey’s test suite against every commit. This is the major phase in every build, as no changes can be remotely pulled until CI has passed the commit.\n\nWe use two CI services, Travis and Circle. Semaphore also watches the repo, but Smokey doesn’t use Semaphore to check commit validity. When someone makes a commit, GitHub fires a webhook event to all registered CI services to alert them to start testing on the new commit. Each CI service runs its test process, and reports back to GitHub by creating a commit status.\n\nmetasmoke\nGitHub POSTs the commit status to metasmoke (handler code). The status gets saved into metasmoke’s database, and forwarded to Smokey via the MS-Smokey websocket.\n\nGitHub also POSTs the commit event itself to metasmoke, and metasmoke uses Octokit to update the deploy branch to the same commit as master. This is why all commits should be made on master rather than deploy, and also why commits to deploy break things. The exception to this is for PR commits, which don’t update deploy until they’re merged.\n\nSmokey\nSmokey receives the websocket message for processing. If the tests failed, then Smokey simply posts that in CHQ and takes no further action. If, however, it was successful, then Smokey further checks if the commit message contains “autopull”, and automatically pulls in the changes if it does; if not, it posts a CI success message in CHQ.\n\nPull Requests\nPull requests have a slightly different flow. CI still tests the commits and reports them back to GitHub, and GitHub forwards them to metasmoke. However, metasmoke rejects them because it doesn’t do anything with them.\n\nPullApprove &amp; Blacklist PRs\nThis is where PullApprove comes in. Pull requests on the Smokey repo are set up to require status checks to pass before allowing them to be merged. We also want to have a review on the code - a second pair of eyes. However, using GitHub’s native reviews for this isn’t possible, as those are restricted to only people with code access (i.e. git privileges). So instead, we have PullApprove.\n\nPullApprove uses a config file, which includes a list of people, to determine who has privileges to review a pull request. If the reviewers approve the pull request, PA sets its PR status to successful; if they don’t, PA sets the PR status to failed. Because this works through a status, the existing requirement for status checks to pass is enough to enforce a PA review before merging. This still requires someone with git privileges to manually merge the PR; however, they don’t have to review it before doing so.\n\nAdditionally, GitHub forwards these PR statuses to metasmoke. For the most part, metasmoke ignores them. However, if a pull request is authored by SmokeDetector, as is the case with blacklist commands from non-code privileged users, then metasmoke checks the status. If it’s a successful status from PullApprove, then metasmoke automatically merges the pull request.\n\nFixing Erroneous Commits\nIf someone has accidentally committed to the deploy branch instead of master, someone with git privileges will need to set this right before things return to normal. This isn’t difficult:\n\naah@broken:~/Smokey$ git checkout master\naah@broken:~/Smokey$ git merge --rebase deploy\naah@broken:~/Smokey$ git push origin master\n\n\n\nIn other words: move the erroneous commits back to master via a rebase merge, and push that up to GitHub. From there, metasmoke should be able to update deploy to the correct reference.\n\nIf not… I hope you know where your towel is.\n",
      "url": "/smokey/Build-Infrastructure"
    },
  

  
    "smokey-chat-rooms-html": {
      "title": "Chat Rooms",
      "content": "This is a list of Stack Exchange chat rooms where SmokeDetector posts reports and/or listens for commands.\n\nSite-specific reports are sent to:\n\n\n  Bitcoin: mempool\n  Crafts: The Studio\n  English: English Language &amp; Usage\n  English Language Learners: Language Overflow\n  Ethereum: Whisper\n  Graphic Design: The Spam Blot\n  Magento: Charcoal SmokeDetector Reports\n  Mathematics: C.R.U.D.E.\n  Mi Yodeya: V’dibarta Bam\n  Money: Smoke Detector\n  Parenting: Parenting\n  Role-playing Games: RPG General Chat\n  Stack Overflow: SO Close Vote Reviewers, SOBotics\n  Stack Overflow in Russian: Ru.SO General Room\n  Science Fiction &amp; Fantasy: SFF community cleanup room\n\n\nUniversal, cross site reports are sent to:\n\n\n  Charcoal HQ\n  Tavern on the Meta (undeleted posts with a 5-minute delay, and excluding Stack Overflow reports).\n\n\nCommands are accepted from:\n\n\n  Charcoal HQ\n  Tavern on the Meta\n  SO Close Vote Reviewers\n  SOBotics\n\n",
      "url": "/smokey/Chat-Rooms"
    },
  

  
    "smokey-commands-html": {
      "title": "Commands",
      "content": "This wiki page contains a list of commands and their explanation.\n\nCommands for everyone\n\nThese commands can be executed by everyone.\n\n\n  !!/alive — Replies a random message taken from a list so you can see that SmokeDetector is still running.\n  !!/status — Shows the UTC date when SmokeDetector started running.\n  !!/rev or !!/ver — Shows the running Git revision.\n  !!/help, !!/info, !!/commands — Shows a small help message about SmokeDetector.\n  !!/apiquota — Shows the remaining API quota of SmokeDetector.\n  !!/queuestatus — Shows the queue status of BodyFetcher.\n  !!/blame — Chooses randomly from a list of people who have talked recently in the room.\n  !!/lick, !!/wut, !!/coffee, !!/tea, and !!/brownie — better versions of !!/alive, aka ‘fun’ commands.\n  !!/location — Replies with the current location, as set in the config file.\n  !!/test &lt;string&gt; — Runs &lt;string&gt; against the filter as if it appeared in a question title, body, or username. To test specifically, use !!/test-a for answer, !!/test-q for question body, !!/test-t for title, or !!/test-u for username.\n  !!/isblu, !!/iswlu — Checks if a user is blacklisted/whitelisted. Two formats are accepted: &lt;profile_URL&gt; or &lt;user_ID&gt; &lt;site_name&gt;\n  !!/whoami — Replies with the bot’s user id for that site\n  !!/amiprivileged — Lets you know if you are in the list of privileged users\n  !!/amicodeprivileged — Lets you know whether or not you have code privileges (i.e. you can blacklist without approval)\n  !!/notify &lt;chatroom_ID_number&gt; &lt;site_domain&gt; — Tells SmokeDetector to ping you, in the given chatroom, when a post is reported on the given site.\nExample:  !!/notify 89 parenting.stackexchange.com-\nNote: Please use the squelch suffix (-) and avoid spamming the chat room with too many requests. See this chat message and the surrounding context.\n  !!/unnotify &lt;chatroom_ID_number&gt; &lt;site_domain&gt; — Cancels the previously set notification.  Also, accepts the silent mode suffix (-).\n  !!/willibenotified &lt;chatroom_ID_number&gt; &lt;site_domain&gt; — Reports whether you will be pinged, in the given room, about spam on the given site.\n  !!/allnotificationsites &lt;chatroom_ID_number&gt; — Shows all sites that you will be pinged for in the given room.\n\n\nCommands as reply for everyone\n\n\n  why — Shows the reason that SmokeDetector caught a post.\nNote that why data is only kept for the last 50 reports. If you need to see older data, it can be found in the post record on Metasmoke.\n  autoflagged — Returns if the post was autoflagged or not, and if so, what users were used.\n\n\nPrivileged commands\n\nThese commands require privileges.\n\n\n\n  !!/report &lt;post URL 1&gt; [&lt;post URL 2&gt; [...]] — Makes SmokeDetector report a specific post/multiple specific posts in Charcoal HQ and Tavern on the Meta. The originator of each post will be added to the blacklist. Maximally 5 at a time. Additionally, the post will be added to the database on Metasmoke, just like all other posts.\n  !!/allspam &lt;user URL&gt; — To be used if a spammer has many posts so you don’t have to use !!/report. This command posts a message about the user in all applicable rooms.  Note that this command does NOT auto-TPU anything, for various reasons. It has an alias, !!/reportuser &lt;user URL&gt;\n  !!/blacklist &lt;regex&gt; — This command is deprecated. Use one of the three specialized blacklist commands instead, which are shown below. If run, this command will print a help\n  !!/blacklist-website &lt;regex&gt; — Adds a regular expression pattern to the website blacklist. Make sure regex special characters are escaped (in particular . characters should be escaped as \\.). If you are a code admin on metasmoke, your change will apply immediately once CI passes; otherwise, a pull request will be created for your changes so that they can be reviewed.\n  !!/blacklist-keyword &lt;regex&gt; — Adds a regular expression pattern to the list of bad keywords. Just like !!/blacklist-website, if you are a code admin on metasmoke your change will apply immediately once CI passes; otherwise, a pull request will be created for your changes to that they can be reviewed.\n  !!/blacklist-username &lt;regex&gt; — Adds a regular expression pattern to the username blacklist. Just like !!/blacklist-website and !!/blacklist-keyword, if you are a code admin on metasmoke your change will apply immediately once CI passes; otherwise, a pull request will be created for your changes to that they can be reviewed.\n  !!/watch-keyword &lt;regex&gt; - Adds a regular expression pattern to a “watch list” which is similar to the list of bad keywords (see !!/blacklist-keyword above) but with less strict criteria for what you can list.  The intent is that you can set up Smoke Detector to watch for something and be alerted when it actually happens.  Typical phrases to watch include domain names and phrases which have not occurred before but not enough to actually blacklist (yet).\n  !!/addwlu &lt;profile_URL&gt; or !!/addwlu &lt;user_ID&gt; &lt;site_name&gt; — Adds a user to the whitelist (this means that if the username for that user matches one of the regexes, this will be ignored).\n  !!/rmwlu &lt;profile_URL&gt; or !!/rmwlu &lt;user_ID&gt; &lt;site_name&gt; — Removes a user from the whitelist.\n  !!/addblu (same syntax as !!/addwlu) — Adds a user to the blacklist (this means that any post of this user will be reported).\n  !!/rmblu (same syntax as !!/rmwlu) — Removes a user from the blacklist.\n  !!/reboot — Reboots SmokeDetector.\n  !!/stappit — Stops all SmokeDetector instances.\n  !!/stappit &lt;string&gt; — Stops all SmokeDetector instances where string is included in the location (e.g. !!/stappit undo would stop Undo/EC2 and Undo/DO, but not teward/aroura\n  !!/pull — Pulls new revisions from GitHub.\n  !!/master — When SmokeDetector enters reverted mode, use this command to go back to the master branch.\n  !!/errorlogs &lt;N&gt; — Shows the last N lines of the error logs.\n  !!/block &lt;N&gt; — Blocks SmokeDetector globally for N seconds; no alerts will be posted. Example: !!/block 600 blocks globally for 10 minutes.\n  !!/block &lt;N&gt; &lt;room_id&gt; — Blocks SmokeDetector in the specific room for N seconds; no alerts will be posted there. Example: !!/block 3600 89 blocks alerts in the Tavern for one hour.\n  !!/unblock — Unblock SmokeDetector manually, resetting global block only.\n  !!/unblock &lt;room_id&gt; — Unblock SmokeDetector manually in the specific room.\n\n\nPrivileged commands as reply\n\nThese commands require privileges and have to be posted as a reply to a message of SmokeDetector.\n\nUser-friendly syntax:\n\n\n  use spam or rude or abusive or offensive for posts that should be flagged as such (equivalent to tpu-; see below)\n  use v, vand or vandalism for posts that have been vandalised and the vandalism edit should be rolled back (equivalent to tp-)\n  use notspam if the post should not be flagged (equivalent to fp-)\n\n\nComplete list:\n\n\n  tp or true — Marks a reported post as true positive.\n  tpu or trueu — Marks a reported post as true positive and adds the poster to the blacklist.\n  fp or false — Marks a reported post as false positive. Additionally removes the user from the blacklist, if that was the reason that the post was reported.\n  fpu or falseu — Marks a reported post as false positive and adds the poster to the whitelist.\n  naa — If the reported post is an answer, this command records it as NAA (Not an answer) in metasmoke.\n  ignore — Makes SmokeDetector ignore a reported post.\n  delete, del, remove or gone — Deletes a message of SmokeDetector. This has been disabled in CHQ due to the reasons listed below. But if you really need to delete a message, use sd delete-force.\n  postgone — Edits out the post link of a SmokeDetector report. If in CHQ, this should be used sparingly.\n\n\nSilent mode and aliases\n\nIf you don’t want SmokeDetector to reply when executing a command add a - sign at the end, for example, fp-. This is a good practice to cut down on chatroom clutter.  Note that SmokeDetector will always report any errors, even if the - is present. The hyphen can be placed after the command itself or after its parameter. The following commands support silent mode: replying to spam reports, managing black- and white-list, and managing chat notifications.\n\nAlso, some frequently used commands have one-letter aliases or convenient words that can be used instead:\n\n\n  \n    \n      Command\n      Alias of\n    \n  \n  \n    \n      f\n      fp-\n    \n    \n      notspam\n      fp-\n    \n    \n      k\n      tpu-\n    \n    \n      spam\n      tpu-\n    \n    \n      rude\n      tpu-\n    \n    \n      abuse\n      tpu-\n    \n    \n      abusive\n      tpu-\n    \n    \n      offensive\n      tpu-\n    \n    \n      vandalism\n      tp-\n    \n    \n      n\n      naa-\n    \n  \n\n\nA note on message deletion\nMessages by SmokeDetector can be deleted within 2 minutes after they were posted by using the del, remove, or gone commands. After 2 minutes are up, SmokeDetector cannot delete its own messages in response to those commands, so any deletion after that window must be done by a moderator.\n\nMessages will also be deleted in Tavern on the Meta and SO Close Vote Reviewers, or Raiders of the Lost Downboat if the relevant post is deleted or marked as false positive before the 2-minute window is up.\n\nPlease note that the usage of deletion commands is discouraged in Charcoal HQ. Generally, messages in CHQ are kept as a record of all reported posts for multiple reasons:\n\n\n  While we do have metasmoke which acts as a mirror of all posts, it does go offline occasionally\n  Some userscripts which run in chat (e.g. FIRE) use information from the chat reports to fetch the correct data from the API.\n  It allows for a second opinion on reports, even if one person has marked it as a false positive\n  Seeing spam and abusive posts is an occupational hazard in CHQ; we aren’t worried if the report contains something NSFW.\n\n\nThe delete-force command can be used if a report really needs to be deleted in Charcoal HQ.\n\nShortcut commands\n\nYou can now use a shortcut to post a reply to one, two or three messages\nat the same time, in this shape:\n\nsd cmd1\nsd cmd1 cmd2\nsd cmd1 cmd2 cmd3\nsd cmd1 cmd2 cmd3 cmd4\nsd cmd1 cmd2 cmd3 cmd4 cmd5\n\n\n\ncmd1 will be invoked in the most recent message, cmd2 on the message\nbefore that and cmd3 on the message before that, and so on.\n\nIt’s also possible to skip a message. Replace a command with a - to skip a\nmessage. For example, sd - delete skips the most recent message and\ndeletes the message before that one.\n\nSmokey will reply to your shortcut command unless all commands have quiet\nmode (like tp-) or just don’t reply by default (like delete).\n\nA few examples:\n\n\n  sd - delete keeps the most recent message and deletes the one before that.\n  sd tp fp delete marks the most recent message as tp, the one before that as fp, and deletes the one before that.\n\n\nYou can also put a digit in front of a command so that the command will apply as many times as the digit. A few examples:\n\n\n  sd 2tpu = sd tpu tpu\n  sd 2tpu 3fpu = sd tpu tpu fpu fpu fpu\n  sd 2- fp = sd - - fp\n\n",
      "url": "/smokey/Commands"
    },
  

  
    "ms-create-feedback-html": {
      "title": "Create Feedback",
      "content": "Route Name\nCreate Feedback\n\nRoute URL\n\nPOST /api/w/post/:id/feedback\n\n\n\nDescription &amp; Usage\n\nThis route allows an app to submit feedback through the API. Your app must have passed through the OAuth flow for write routes (see API documentation home) and must have a valid write token; this token should be passed in the token query string parameter.\n\nSpecify the feedback type being added by using the type parameter. The :id parameter in the URL should be replaced with the metasmoke ID of the post; use the posts by URL route to get the metasmoke ID if you don’t already have it.\n\n\n  Heads up: sending any type of positive feedback using this route will additionally blacklist the user with SmokeDetector.\n\n\nThis route will return all feedback on the post targeted once it has completed adding the new feedback.\n\nExample\nRequest (key and token omitted):\n\nHTTP/1.1 POST /api/w/post/20191/feedback?type=tpu-\n\n\n\nResponse:\n\n[\n    {\n        \"id\":16657,\n        \"message_link\":null,\n        \"user_name\":\"Ferrybig\",\n        \"user_link\":null,\n        \"feedback_type\":\"tpu-\",\n        \"post_id\":20191,\n        \"post_link\":\"//drupal.stackexchange.com/questions/193526\",\n        \"user_id\":null,\n        \"is_invalidated\":false,\n        \"invalidated_by\":null,\n        \"invalidated_at\":null,\n        \"chat_user_id\":null,\n        \"created_at\":null,\n        \"updated_at\":null\n    },\n    {\n        \"id\":16662,\n        \"message_link\":null,\n        \"user_name\":\"JamesENL\",\n        \"user_link\":null,\n        \"feedback_type\":\"tpu-\",\n        \"post_id\":20191,\n        \"post_link\":\"//drupal.stackexchange.com/questions/193526\",\n        \"user_id\":null,\n        \"is_invalidated\":false,\n        \"invalidated_by\":null,\n        \"invalidated_at\":null,\n        \"chat_user_id\":null,\n        \"created_at\":null,\n        \"updated_at\":null\n    }\n]\n\n\n\n(the response will also include the created feedback, which has been omitted here for brevity)\n\nSmokey websocket\n\n  If you just want to use the route already, you don’t need to read this section - it’s just additional detail for the interested.\n\n\nThis route also makes use of the metasmoke-Smokey websocket to communicate feedback back to SmokeDetector. Specifically, these cases cause a websocket message to be sent:\n\n\n  any type of true positive feedback will send a blacklist request (like tpu- with Smokey; the user will be blacklisted and all posts reported)\n  naa feedback gets sent back to Smokey to avoid the post being escalated to the Tavern for feedback\n\n",
      "url": "/ms/Create-Feedback"
    },
  

  
    "smokey-creating-new-spam-checks-html": {
      "title": "Creating new spam checks",
      "content": "\n  This document covers how to create a new spam check, which essentially turns out to be a guide on findspam.py.\n\n\n1. The B(are|ear) Necessities\nThe very first thing you need to do before creating a new spam check is test if it’s actually necessary.\n\n\n  What is your proposed check designed to catch?\n  Is it something that’s caught by existing checks? This includes regex-based pattern checks, blacklists, and check methods. Use the various !!/test commands to check this.\n  Is it something we want to catch? Remember that Smokey is designed to catch spam and/or abuse — anything else (low quality posts, not-an-answers, etc) is out of scope. There are plenty more moderation bots around the network that might want that kind of check, though.\n\n\n2. Write a Check\n…preferably addressed to me, with plenty of money involved. (Ha! Spelling jokes!)\n\nIf you’ve determined that a new check is necessary, now you need to actually write it. The preferred way of doing this is a regex — these are (usually) simpler and easier to maintain than the alternatives. Writing a regex check is pretty easy: just write the regex. You can use regex-checking websites like regex101 to check if you’ve written it right — doing this is encouraged, because regex is not an easy language to speak.\n\nThe alternative, which should only be used if a regex doesn’t do the job, is to write a check method. This is done by writing a new method in findspam.py, which takes two parameters: s and site. s is a string of stuff that you need to check (like the title, username, or post body), and site is the site that the post is on. Give your method a descriptive name, so that its purpose can be judged at a glance.\n\nYour method should return a pair of values. The first is a boolean, indicating whether or not you think the post is spam. The second is a string, which is the why data for the post (and if you don’t know what that means, you should probably be letting someone more experienced write the check — or go learn about it).\n\nHere’s an example check method. This method will say that any s longer than 3 characters is spam.\n\ndef ridiculous_spam_check(s, site):\n  if len(s) &gt; 3:\n       return True, \"Length is greater than 3 characters\"\n  else:\n       return False, \"\"\n\n\n\n3. Endless Lists\nChecks are our ammunition against spam; now you need a gun to fire it from. In our case, it’s a GLOCK — a Giant List of Checks and Keywords.\n\nScroll to the rules array, which is somewhere around line 641 in findspam.py. This structure describes all the checks that SmokeDetector runs, and how to apply them. (N.B.: It’s not actually JSON, don’t make that mistake — it’s Python dicts.)\n\nYou need to add a new entry to this array that describes your check. The general format of this dictionary is:\n\n{\n    'regex': r\"Include your regex here if it's a regex-based check\",\n    'method': method_name,  # Pass the name of your method here if it's a method-based check,\n    'all': True,  # True if you want to scan all sites in the network, False otherwise,\n    'sites': [],  # If `all` is true, these sites are excluded; otherwise, they are the only sites to get scanned\n    'reason': \"Name of the reason you're categorising these posts as (bad keyword, link at end of body, etc)\",\n    'title': False,  # True if you want to scan post titles, False otherwise\n    'body': True,  # True if you want to scan post bodies, False otherwise\n    'username': False,  # True if you want to scan owner usernames, False otherwise\n    'body_summary': False,  # True if you want to scan body summaries, False otherwise\n    'stripcodeblocks': False,  # True if you want code removed before getting passed to your check\n    'max_rep': 20,  # Posts from users above this reputation will not be scanned\n    'max_score': 1,  # Posts scoring above this value will not be scanned\n}\n\n\n\nYou should only include one of regex or method — checks should not be both at the same time.\n",
      "url": "/smokey/Creating-new-spam-checks"
    },
  

  
    "ms-detailed-time-to-deletion-html": {
      "title": "Detailed Time to Deletion",
      "content": "Route Name\nDetailed Time to Deletion\n\nRoute URL\n\n/api/stats/detailed_ttd\n\n\n\nDescription &amp; Usage\nThis route allows you to view data about the average time to deletion (in seconds) for posts during each hour of the day, given that the posts were marked as spam and determined to be true positives.\n\nThe response shows three groups of “flags”, which correspond to post creation dates:\n\n  “0 flags”: post created before 1/1/2017\n  “1 flag”: post created on/after 1/1/2017 and before 2/14/2017\n  “3 flags”: post created on/after 2/14/2017\n\n\nYou can use the per_page query string parameter to adjust how many results you get, up to a maximum of 100.\n\nThe has_more field in the response indicates if there are more results available than have been returned in this result set; use the page query string parameter to get the next page of results. ?page=1 will return the first page; ?page=2 the second, and so on.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/stats/detailed_ttd\n\n\n\nResponse:\n\n    {\n        \"name\": \"0 flags\",\n        \"data\": [\n            [0, \"632.0\" ],\n            [1, \"600.0\"],\n            [2, \"631.0\"],\n            ...\n            [21, \"481.0\"],\n            [22, \"554.0\"],\n            [23, \"603.0\"],\n        ]\n    }\n    {\n        \"name\": \"1 flag\",\n        \"data\": [\n            [0, \"564.0\" ],\n            [1, \"610.0\"],\n            [2, \"620.0\"],\n            ...\n            [21, \"343.0\"],\n            [22, \"424.0\"],\n            [23, \"474.0\"],\n        ]\n    }\n    {\n        \"name\": \"3 flags\",\n        \"data\": [\n            [0, \"571.0\" ],\n            [1, \"584.0\"],\n            [2, \"694.0\"],\n            ...\n            [21, \"634.0\"],\n            [22, \"622.0\"],\n            [23, \"621.0\"],\n        ]\n    }\n\n\n",
      "url": "/ms/Detailed-Time-to-Deletion"
    },
  

  
    "smokey-feedback-guidance-html": {
      "title": "Feedback Guidance",
      "content": "Some aspects of feedback to SmokeDetector have historically caused confusion. This page is intended to address some of those confusions.\n\nGeneric Guidance\nIn very general terms, the litmus test for whether you should use k or f is this:\n\n\n  If SmokeDetector was implemented as a system-level block, would we want to catch this type of activity?\n\n\nIf the answer to that question is yes, you should mark the post k. There are a few types of activity we have specific guidelines for, as outlined below.\n\nAlso, if you report a post manually (via FDSC or with the !!/report command), you should refrain from posting feedback. This way, we’ll always have two different people (counting Smokey as human) involved in handling a post.\n\nDisclosed affiliation\nIt’s fine to promote your own product or service on Stack Exchange, as long as:\n\n\n  you’re not doing it excessively\n  you disclose your affiliation\n  you only do so where relevant\n\n\nIf all of those conditions are true, then self-promotion is not spam and therefore f and not k (unless it doesn’t answer the question, in which case it’s n). If any of them are false, self-promotion is k.\n\nSelf-vandalism\nSelf-vandalism is where a user vandalises their own post by replacing all its useful content with something like “xxxxxxxxxxxxxxxxxxxxxxxx”, or “deleted deleted deleted”. For self-vandalism, use tp- (or one of its aliases, such as v, vand or vandalism). At a system level, we’d want to catch and block people doing this, but it’s not worth blacklisting the user because it’s usually a one-time incident. Most users, when warned, don’t do it again.\n\nForeign-language posts on English sites (or vice versa)\nTreat these as you would an English post. If it’s spam, offensive, etc., then mark it as k; otherwise use f or n. Particularly, answers in the wrong language for the target site are NAA, so n. Being in the wrong language for the site alone doesn’t make a post k-able.\n\nPlagiarism\nPlagiarism — copying without attribution from another source such as someone else’s answer or another website — is not always easy to spot. If you do spot it in an answer, then mark it as k — you may wish to explain to other users in the chatroom why you’ve done that, to avoid arguments about what the feedback should be.\n\nIf you get to a post before it’s deleted, an easy way to spot plagiarism is to check the other posts on the same page for similar content.\n\nHowever, while plagiarism should be marked as k, the !!/report command shouldn’t be used to report plagiarism — catching plagiarism is a bonus if we do, but we’re not aiming to catch it.\n\nRepairable offensive posts\nSome (non-native) speakers think f*cking is a synonym for very. The posts usually can be salvaged by editing out the inappropriate language and leaving a comment. The appropriate feedback is f as we don’t want a system-level block preventing these kind of posts.\n\nNAA feedback\nNAA feedback has sometimes been a little confusing. Using n as your feedback should, in general, be done if:\n\n\n  the post is not spam, abusive, offensive etc. (use k)\n  you would flag the post as Not An Answer on the site itself\n\n",
      "url": "/smokey/Feedback-Guidance"
    },
  

  
    "smokey-guidance-for-blacklisting-and-watching-html": {
      "title": "Guidance for Blacklisting and Watching",
      "content": "Blacklisting or watching a keyword or a web site address cause the spam detection bot SmokeDetector to trigger an alert whenever that keyword or web site address appears in a post.  In other words, it basically says that any post containing this expression is spam, or at least suspicious.\n\nThe Website Blacklist\n\nThe website blacklist consists of a list of websites associated with known spam that automatically raise suspicion when posted anywhere on Stack Exchange.\n\nBlacklisting a website makes SmokeDetector report every post that is posted or modified with a link to the website (formatted as a link or otherwise) in its text.\n\nThe website blacklist is maintained in the SmokeDetector GitHub repository, specifically in the file blacklisted_websites.txt.\n\nThe Keyword Blacklist\n\nThe keyword blacklist consists of a list of phrases which are frequently seen in spam, and rarely outside of spam posts.\n\nBlacklisting a “keyword” (which can actually be a regular expression matching a phrase or a more-complex expression with alternatives, like find (true )?love which matches either of “find love” or “find true love”) causes any post which matches it to be reported as probable spam by SmokeDetector.  Matches are not reported in the middle of a word; the keyword expression “dog” does not match “doggone” or “endogenous”.\n\nThe keyword blacklist is maintained in the SmokeDetector GitHub repository, specifically in the file bad_keywords.txt.\n\nWatch Expressions\n\n“Watching” an expression causes SmokeDetector to report it just like a blacklist expression, but the rule weight is kept low, so as to prevent matches from triggering autoflagging. Posts which only match watched expressions and no other rules are not reported in other chat rooms, just in Charcoal. That means you can use !!/watch to try out different patterns experimentally, just to get an idea of what sorts of posts match a particular expression.\n\nThe list of watched expressions is maintained in the SmokeDetector GitHub repository, specifically in the file watched_keywords.txt.  The format is slightly different from the other similar files; each entry is a tab-delimited record which includes a date stamp (expressed as Unix epoch, i.e. seconds since midnight Jan 1 1970 UTC) and the user name of the person who added the expression.\n\nRules for Blacklisting and Watching\n\nWe have established the following rules for watching and blacklisting.\n\n\n  Blacklisted websites: reserved for sites which we are highly confident that are used only in spam. You may add a site to this list if one of the following is true.\n    \n      The site has at least five hits in Metasmoke, with no false positives, and at least one of them is below the default autoflagging threshold (currently, 280) and no older than six months.\n      There are more than twenty hits in the last six months, and no false positives.\n      There are recent hits, and more than 30 hits overall, and no false positives.\n    \n  \n  Blacklisted keywords: reserved for phrases which we are highly confident that are used only in spam.  You may add a phrase to this list if the following is true.\n    \n      The phrase has been used repeatedly in recent spam and has no false positives in Metasmoke, and searching on Stack Exchange indicates that it is not a common phrase on any site in the network.\n    \n  \n  Watched keywords: anything is game, but be prepared to have it removed if circumstances require it.\n    \n      We will be removing patterns periodically; you can reduce the risk of having useful patterns removed by proactively removing patterns you no longer are interested in, or which produce very uncertain value.\n      Autoflagging weight for this reason is technically forced to stay at 1.\n      Smoke Detector will regard these rules as “experimental”; it will not alert in other rooms than Charcoal HQ if there are hits solely from this set of rules.\n    \n  \n\n\nHow to Blacklist or Watch Something\n\nYou will want to test that the expression you want to blacklist or watch isn’t already covered by one of the existing patterns.\n\nYou can test this by using the !!/test &lt;string to test&gt; command (or !!/test-a &lt;string to test&gt; to test as an answer).\n\nEveryone with SmokeDetector privileges (if you don’t have those and would like them, read up on how to get them) can blacklist a website, though this will need to be approved by someone with code privileges if you don’t already have them. Additions to the blacklist must be valid regular expressions (regex). In reality that means for largely exact matches (like the website blacklist) that you ensure that special characters (like .) are escaped. (Example: thisisspam\\.com)\n\nThere are two methods to add a website to a watch list or blacklist:\n\n\n  \n    Propose a change to the relevant file on GitHub and create a pull request specifying why you want to blacklist the website.\n  \n  \n    Use the pertinent chat command in any of the Smoke Detector chatrooms. This will create a pull request containing your change for you.\n    \n      !!/blacklist-website &lt;regex&gt; to blacklist a web site\n      !!/blacklist-keyword &lt;regex&gt; to blacklist a keyword expression\n      !!/watch &lt;regex&gt; to add something to the watch list\n    \n  \n\n\nIf you’re blacklisting or watching a complex regex to match a whole bunch of different stuff, it’s probably better off in the pattern-matching section of findspam.py. You’ll need to propose a change to the file on GitHub for this; ask for help if you’re unsure what to do.\n",
      "url": "/smokey/Guidance-for-Blacklisting-and-Watching"
    },
  

  
    "ms-post-feedback-html": {
      "title": "Post Feedback",
      "content": "Route Name\nPost Feedback\n\nRoute URL\n\n/api/post/:id/feedback\n\n\n\nDescription &amp; Usage\nThis route will give you details of all feedbacks on one post. Replace :id in the URL with the metasmoke post ID you’re looking for, and all database fields for each feedback will be returned.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/post/20191/feedback\n\n\n\nResponse:\n\n{\n    \"items\": [\n        {\n            \"id\":16657,\n            \"message_link\":null,\n            \"user_name\":\"Ferrybig\",\n            \"user_link\":null,\n            \"feedback_type\":\"tpu-\",\n            \"post_id\":20191,\n            \"post_link\":\"//drupal.stackexchange.com/questions/193526\",\n            \"user_id\":null,\n            \"is_invalidated\":false,\n            \"invalidated_by\":null,\n            \"invalidated_at\":null,\n            \"chat_user_id\":null,\n            \"created_at\":null,\n            \"updated_at\":null,\n            \"api_key_id\": 15,\n            \"chat_host\": null\n        },\n        {\n            \"id\":16662,\n            \"message_link\":null,\n            \"user_name\":\"JamesENL\",\n            \"user_link\":null,\n            \"feedback_type\":\"tpu-\",\n            \"post_id\":20191,\n            \"post_link\":\"//drupal.stackexchange.com/questions/193526\",\n            \"user_id\":null,\n            \"is_invalidated\":false,\n            \"invalidated_by\":null,\n            \"invalidated_at\":null,\n            \"chat_user_id\":null,\n            \"created_at\":null,\n            \"updated_at\":null,\n            \"api_key_id\": 15,\n            \"chat_host\": null\n        }\n    ],\n    \"has_more\": false\n}\n\n\n",
      "url": "/ms/Post-Feedback"
    },
  

  
    "ms-post-reasons-html": {
      "title": "Post Reasons",
      "content": "Route Name\nPost Reasons\n\nRoute URL\n\n/api/post/:id/reasons\n\n\n\nDescription &amp; Usage\nThis route provides details of the reasons a post was caught by. Replace :id in the URL with the metasmoke post ID you’re looking for, and all database fields for each reason will be returned.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/post/20191/reasons\n\n\n\nResponse:\n\n{\n    \"items\": [\n        {\n            \"id\":15,\n            \"reason_name\":\"Link at end of body\",\n            \"last_post_title\":\"VitaPulse by Princeton Vitamins is evidently\",\n            \"inactive\":false,\n            \"weight\": 50,\n            \"maximum_weight\": null\n        },\n        {\n            \"id\":35,\n            \"reason_name\":\"Pattern-matching website in body\",\n            \"last_post_title\":\"VitaPulse by Princeton Vitamins is evidently\",\n            \"inactive\":false,\n            \"weight\": 50,\n            \"maximum_weight\": null\n        }\n    ],\n    \"has_more\": false\n}\n\n\n",
      "url": "/ms/Post-Reasons"
    },
  

  
    "ms-posts-by-date-range-html": {
      "title": "Posts by Date Range",
      "content": "Route Name\nPosts by Date Range\n\nRoute URL\n\n/api/posts/between\n\n\n\nDescription &amp; Usage\nThis route allows you to discover posts that were reported/recorded in a specific time period. Use the from_date and to_date query string parameters to adjust the date range you get; both of these parameters should be filled with a Unix timestamp (seconds since the epoch).\n\n\n  Note for JavaScript developers: JavaScript uses pseudo-Unix timestamps, in that it records milliseconds since the epoch. To provide a valid value, divide the timestamp by 1000 and round the result.\n\n\nBehaviour is undefined if only one of these parameters is filled; there is no guarantee what results you get and it may change at any time. Do this at your own risk.\n\nExample\nRequest:\n\nGET /api/posts/between?from_date=1477404348&amp;to_date=1477490748 HTTP/1.1\n\n\n\nResponse:\n\n{\n    \"items\":[\n        {\n            \"id\":44810,\n            \"title\":\"HL12 Diabetes is a characteristic equation\",\n            \"body\":\"&lt;truncated for brevity&gt;\",\n            \"link\":\"//drupal.stackexchange.com/questions/218904\",\n            \"post_creation_date\":null,\n            \"created_at\":\"2016-10-26T14:03:44.000Z\",\n            \"updated_at\":\"2016-10-26T14:04:06.000Z\",\n            \"site_id\":86,\n            \"user_link\":\"//drupal.stackexchange.com/u/68737\",\n            \"username\":\"Kathleenpochi\",\n            \"why\":\"Body - Position 277-293: weight reduction\\nBody - Position 375-394: supplementsoffer.co, Position 616-635: supplementsoffer.co\\nPost - Link at end: http://www.supplementsoffer.com/hl12-diabetes/\\u003c/a\\u003e\",\n            \"user_reputation\":1,\n            \"score\":null,\n            \"upvote_count\":null,\n            \"downvote_count\":null,\n            \"stack_exchange_user_id\":37865,\n            \"is_tp\":true,\n            \"is_fp\":false,\n            \"is_naa\":false,\n            \"revision_count\": null,\n            \"deleted_at\": \"2016-10-26T14:04:22.000Z\",\n            \"smoke_detector_id\": null,\n            \"autoflagged\": false\n        },\n        {\n            \"id\":44809,\n            \"title\":\"Best site for git commands line beginning. Try this keep handy www.devcli.com/git\",\n            \"body\":\"&lt;truncated for brevity&gt;\",\n            \"link\":\"//stackoverflow.com/questions/40264223\",\n            \"post_creation_date\":null,\n            \"created_at\":\"2016-10-26T13:59:38.000Z\",\n            \"updated_at\":\"2016-10-26T13:59:48.000Z\",\n            \"site_id\":1,\n            \"user_link\":\"//stackoverflow.com/u/6784831\",\n            \"username\":\"Koshta\",\n            \"why\":\"Post manually reported by user *Magisch* in room *SO Close Vote Reviewers*.\\n\",\n            \"user_reputation\":1,\n            \"score\":-3,\n            \"upvote_count\":null,\n            \"downvote_count\":3,\n            \"stack_exchange_user_id\":37864,\n            \"is_tp\":true,\n            \"is_fp\":false,\n            \"is_naa\":false,\n            \"revision_count\": null,\n            \"deleted_at\": \"2016-10-26T14:00:43.000Z\",\n            \"smoke_detector_id\": null,\n            \"autoflagged\": false\n        },\n        {\n            \"id\":44808,\n            \"title\":\"It's now or in no manner that you just get well Muscle Boost X?\",\n            \"body\":\"&lt;truncated for brevity&gt;\" rel=\\\"nofollow\\\"\\u003ehttp://boostupmuscles.com/muscle-boost-x/\\u003c/a\\u003e\\u003c/p\\u003e\\n\\n\\u003cp\\u003e\\u003ca href=\\\"https://i.stack.imgur.com/vW69L.jpg\\\" rel=\\\"nofollow\\\"\\u003e\\u003cimg src=\\\"https://i.stack.imgur.com/vW69L.jpg\\\" alt=\\\"enter image description here\\\"\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\",\n            \"link\":\"//graphicdesign.stackexchange.com/questions/79301\",\n            \"post_creation_date\":null,\n            \"created_at\":\"2016-10-26T13:59:27.000Z\",\n            \"updated_at\":\"2016-10-26T13:59:27.000Z\",\n            \"site_id\":68,\n            \"user_link\":\"//graphicdesign.stackexchange.com/u/78948\",\n            \"username\":\"WilliaStengel\",\n            \"why\":\"Title - Position 49-55: Muscle\\nBody - Position 515-527: .com/muscle-\\nBody - Position 508-519: muscles.com, Position 566-577: muscles.com\",\n            \"user_reputation\":1,\n            \"score\":null,\n            \"upvote_count\":null,\n            \"downvote_count\":null,\n            \"stack_exchange_user_id\":37863,\n            \"is_tp\":false,\n            \"is_fp\":false,\n            \"is_naa\":false,\n            \"revision_count\": null,\n            \"deleted_at\": \"2016-10-26T14:02:17.000Z\",\n            \"smoke_detector_id\": null,\n            \"autoflagged\": false\n        }\n    ],\n    \"has_more\":true\n}\n\n\n",
      "url": "/ms/Posts-by-Date-Range"
    },
  

  
    "ms-posts-by-feedback-html": {
      "title": "Posts by Feedback",
      "content": "Route Name\nPosts by Feedback\n\nRoute URL\n\n/api/posts/feedback\n\n\n\nDescription &amp; Usage\n\nThis route provides a list of posts that have a specified feedback type on them. Specify the type of feedback by passing a valid feedback type. These include tpu-, fp-, naa-, or ignore-, but there are other valid types.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/posts/feedback?type=tpu-\n\n\n\nResponse:\n\n{\n    \"items\":[\n        {\n            \"id\":672,\n            \"title\":\"Is \\\"fugazi\\\" an English word?\",\n            \"body\":\"&lt;truncated&gt;\",\n            \"link\":\"//ell.stackexchange.com/a/65729\",\n            \"post_creation_date\":null,\n            \"created_at\":null,\n            \"updated_at\":\"2015-09-07T02:25:41.000Z\",\n            \"site_id\":186,\n            \"user_link\":null,\n            \"username\":null,\n            \"why\":null,\n            \"user_reputation\":null,\n            \"score\":null,\n            \"upvote_count\":null,\n            \"downvote_count\":null,\n            \"stack_exchange_user_id\":null,\n            \"is_tp\":true,\n            \"is_fp\":false,\n            \"is_naa\": false,\n            \"revision_count\": 1,\n            \"deleted_at\": \"2017-10-12T20:37:24.000Z\",\n            \"smoke_detector_id\": 18,\n            \"autoflagged\": false\n        },\n        {\n            \"id\":674,\n            \"title\":\"Is there any difference between Loan and Credit?\",\n            \"body\":\"&lt;truncated&gt;\",\n            \"link\":\"//english.stackexchange.com/a/270130\",\n            \"post_creation_date\":null,\n            \"created_at\":null,\n            \"updated_at\":\"2015-09-07T02:25:41.000Z\",\n            \"site_id\":33,\n            \"user_link\":null,\n            \"username\":null,\n            \"why\":null,\n            \"user_reputation\":null,\n            \"score\":null,\n            \"upvote_count\":null,\n            \"downvote_count\":null,\n            \"stack_exchange_user_id\":null,\n            \"is_tp\":true,\n            \"is_fp\":false,\n            \"is_naa\": false,\n            \"revision_count\": 1,\n            \"deleted_at\": null,\n            \"smoke_detector_id\": 18,\n            \"autoflagged\": false\n        }\n    ],\n    \"has_more\":true\n}\n\n\n\nValid Type options\n\nA summary of all types that Meta Smoke has ever seen was posted on Oct. 25, 2016. However, not all of these are really useful. The most common type values are (in descending order of usage, and anything seen over 100 times since the post linked above):\n\n\n  tpu-\n  tp\n  fp-\n  fp\n  naa-\n  trueu-\n  tpu\n  naa\n  tp-\n  ignore-\n  fpu-\n  trueu\n  Ambiguous\n  ignore\n\n",
      "url": "/ms/Posts-by-Feedback"
    },
  

  
    "ms-posts-by-id-html": {
      "title": "Posts by ID",
      "content": "Route Name\nPosts by ID\n\nRoute URL\n\n/api/posts/:ids\n\n\n\nDescription &amp; Usage\nThis route allows you to retrieve data about posts by specifying their IDs. Replace :ids in the URL with a semicolon-delimited list of metasmoke post IDs, and all database fields on each post object will be returned.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/posts/20191;20192\n\n\n\nResponse:\n\n{\n    \"has_more\": false,\n    \"items\": [\n        {\n            \"id\": 20192,\n            \"title\": \"Spammy Title\",\n            \"body\": \"&lt;p&gt;(spammy text, lots of it)&lt;/p&gt;\\n\",\n            \"link\": \"//askubuntu.com/questions/741932\",\n            \"site_id\": 29,\n            \"user_link\": \"//askubuntu.com/u/514570\",\n            \"username\": \"Redacted User\",\n            \"why\": \"Body - Position 781-797: example.com\\nPost - Link at end: http://example.com/product-promotion/&lt;/a&gt;\",\n            \"user_reputation\": 1,\n            \"stack_exchange_user_id\": 15385,\n            \"is_tp\": true,\n            \"is_fp\": false,\n            \"is_naa\": false,\n            \"deleted_at\": null,\n            \"count_tp\": 2,\n            \"count_fp\": 0,\n            \"count_naa\": 0,\n            \"autoflagged\": {\n                \"flagged\": false,\n                \"names\": [],\n                \"users\": []\n            },\n            \"manual_flags\": {\n                \"users\": []\n            },\n            \"feedbacks\": [\n                {\n                    \"feedback_type\": \"tpu-\",\n                    \"user_name\": \"Meanie\"\n                },\n                {\n                    \"feedback_type\": \"tpu-\",\n                    \"user_name\": \"Eenie\"\n                }\n            ],\n            \"reason_weight\": 196,\n            \"revision_count\": 0\n        },\n        {\n            \"id\": 20191,\n            \"title\": \"This is Spammy Too\",\n            \"body\": \"&lt;p&gt;(Another similar spam post)&lt;/p&gt;\\n\",\n            \"link\": \"//drupal.stackexchange.com/questions/193526\",\n            \"site_id\": 86,\n            \"user_link\": \"//drupal.stackexchange.com/u/58614\",\n            \"username\": \"Redacted User\",\n            \"why\": \"Body - Position 417-433: example.com\\nPost - Link at end: http://example.com/product-promotion/&lt;/a&gt;\",\n            \"user_reputation\": 1,\n            \"stack_exchange_user_id\": 15384,\n            \"is_tp\": true,\n            \"is_fp\": false,\n            \"is_naa\": false,\n            \"deleted_at\": null,\n            \"count_tp\": 2,\n            \"count_fp\": 0,\n            \"count_naa\": 0,\n            \"autoflagged\": {\n                \"flagged\": false,\n                \"names\": [],\n                \"users\": []\n            },\n            \"manual_flags\": {\n                \"users\": []\n            },\n            \"feedbacks\": [\n                {\n                    \"feedback_type\": \"tpu-\",\n                    \"user_name\": \"Meanie\"\n                },\n                {\n                    \"feedback_type\": \"tpu-\",\n                    \"user_name\": \"Eenie\"\n                }\n            ],\n            \"reason_weight\": 196,\n            \"revision_count\": 0\n        }\n    ]\n}\n\n\n",
      "url": "/ms/Posts-by-ID"
    },
  

  
    "ms-posts-by-site-html": {
      "title": "Posts by Site",
      "content": "Route Name\nPosts by Site\n\nRoute URL\n\n/api/posts/site\n\n\n\nDescription &amp; Usage\nThis route allows you to fetch posts based on the Stack Exchange site they were posted on. Use the site query string parameter to specify which site you want to check: this parameter should be filled with a valid site domain to the Stack Exchange site in question (such as stackoverflow.com, or drupal.stackexchange.com.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/posts/site?site=drupal.stackexchange.com\n\n\n\nResponse:\n\n    {\n        \"id\": 88814,\n        \"title\": \"For Which Age Group This Face Cream Is Suitable For?\",\n        \"body\": \"&lt;truncated&gt;\",\n        \"link\": \"//drupal.stackexchange.com/questions/247905\",\n        \"site_id\": 86,\n        \"user_link\": \"https://drupal.stackexchange.com/users/79823/aftly-19\",\n        \"username\": \"Redacted User\",\n        \"why\": \"&lt;truncated&gt;\",\n        \"user_reputation\": 1,\n        \"stack_exchange_user_id\": 77689,\n        \"is_tp\": true,\n        \"is_fp\": false,\n        \"is_naa\": false,\n        \"deleted_at\": \"2017-10-12T14:11:09.000Z\"\n    }\n\n\n",
      "url": "/ms/Posts-by-Site"
    },
  

  
    "ms-posts-by-urls-html": {
      "title": "Posts by URLs",
      "content": "Route Name\nPosts by URLs\n\nRoute URL\n\nGET  /api/posts/urls\nPOST /api/posts/urls\n\n\n\nDescription &amp; Usage\nThis route provides a way to access posts without having their metasmoke IDs; instead, you can use the URL to the post.\n\nPass a semicolon-delimited list of URLs to the posts in the urls query string parameter. Each URL must follow a specific format to match a post successfully. For questions, the URL should look like this:\n\n//drupal.stackexchange.com/questions/319845\n\n\n\nFor answers, the URL should be akin to this:\n\n//drupal.stackexchange.com/a/748265\n\n\n\nIn each case, replace the site and post ID with the correct values for your targeted post. The ID in this case is the Stack Exchange ID, not the metasmoke ID.\n\nThis route supports both GET and POST requests, for the event that your list of URLs is too long for a GET.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/posts/urls?urls=//drupal.stackexchange.com/questions/193526\n\n\n\nResponse:\n\n{\n    \"items\": [{  \n        \"id\":20191,\n        \"title\":\"It is well known that you should\",\n        \"body\":\"&lt;truncated&gt;\",\n        \"link\":\"//drupal.stackexchange.com/questions/193526\",\n        \"post_creation_date\":null,\n        \"created_at\":\"2016-03-04T08:24:32.000Z\",\n        \"updated_at\":\"2016-03-04T08:29:54.000Z\",\n        \"site_id\":86,\n        \"user_link\":\"//drupal.stackexchange.com/u/58614\",\n        \"username\":\"Yusef Hamid\",\n        \"why\":\"Body - Position 417-433: musclegrowth.com\\nPost - Link at end: http://masspmmusclegrowth.com/pearl-e-whites/\\u003c/a\\u003e\",\n        \"user_reputation\":1,\n        \"score\":null,\n        \"upvote_count\":null,\n        \"downvote_count\":null,\n        \"stack_exchange_user_id\":15384,\n        \"is_tp\":true,\n        \"is_fp\":false,\n        \"is_naa\": false,\n        \"revision_count\": 0,\n        \"deleted_at\": null,\n        \"smoke_detector_id\": null,\n        \"autoflagged\": {\n            \"flagged\": false,\n            \"names\": [],\n            \"users\": [],\n        },\n        \"count_tp\": 2,\n        \"count_fp\": 0,\n        \"count_naa\": 0,\n        \"manual_flags\": {\n            \"users\": [],\n        },\n        \"feedbacks\": [\n          {\n            \"feedback_type\": \"tpu-\",\n            \"user_name\": \"Ferrybig\"\n          },\n          {\n            \"feedback_type\": \"tpu-\",\n            \"user_name\": \"JamesENL\"\n          }\n        ],\n        \"reason_weight\": 196\n    }],\n    \"has_more\": false\n}\n\n\n",
      "url": "/ms/Posts-by-URLs"
    },
  

  
    "ms-posts-caught-by-reason-html": {
      "title": "Posts caught by reason",
      "content": "Route Name\nPosts caught by reason\n\nRoute URL\n\n/api/reason/:id/posts\n\n\n\nDescription &amp; Usage\nThis route provides data about the posts caught by a specific reason. Replace :id in the URL with the ID of the metasmoke reason you want data for, and all database fields for each post caught by that reason will be returned.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/reason/47/posts\n\n\n\nResponse:\n\n{\n    \"items\":[\n        {\n            \"id\": 88771,\n            \"title\": \"What 844\\*(235)\\*O34I Coinbase customer service is Coinbase phone number?\",\n            \"body\": \"&lt;truncated&gt;\",\n            \"link\": \"//stackoverflow.com/questions/46708105\",\n            \"post_creation_date\": null,\n            \"created_at\": \"2017-10-12T11:08:58.000Z\",\n            \"updated_at\": \"2017-10-12T11:11:08.000Z\",\n            \"site_id\": 1,\n            \"user_link\": \"https://stackoverflow.com/users/8614650/djsmitparry\",\n            \"username\": null,\n            \"why\": \"Title - Phone number: 8442350341\",\n            \"user_reputation\": 1,\n            \"score\": null,\n            \"upvote_count\": null,\n            \"downvote_count\": null,\n            \"stack_exchange_user_id\": 77652,\n            \"is_tp\": true,\n            \"is_fp\": false,\n            \"is_naa\": false,\n            \"revision_count\": 1,\n            \"deleted_at\": \"2017-10-12T11:11:08.000Z\",\n            \"smoke_detector_id\": 18,\n            \"autoflagged\": false\n        },\n        {\n            \"id\": 88414,\n            \"title\": \"Connection failed:Access denied for user 'u910188312\\_gross'@'156.67.222.30' (using password: YES). Is there any solution?\",\n            \"body\": \"&lt;truncated&gt;\",\n            \"link\": \"//stackoverflow.com/questions/46668441\",\n            \"post_creation_date\": null,\n            \"created_at\": \"2017-10-10T13:47:18.000Z\",\n            \"updated_at\": \"2017-10-10T13:47:39.000Z\",\n            \"site_id\": 1,\n            \"user_link\": \"https://stackoverflow.com/users/8720919/deekshith\",\n            \"username\": null,\n            \"why\": \"Title - Phone number: 1566722230\",\n            \"user_reputation\": 1,\n            \"score\": null,\n            \"upvote_count\": null,\n            \"downvote_count\": null,\n            \"stack_exchange_user_id\": 77329,\n            \"is_tp\": false,\n            \"is_fp\": true,\n            \"is_naa\": false,\n            \"revision_count\": 1,\n            \"deleted_at\": null,\n            \"smoke_detector_id\": 18,\n            \"autoflagged\": false\n        },\n        ...\n    ],\n    \"has_more\":true\n}\n\n\n",
      "url": "/ms/Posts-caught-by-reason"
    },
  

  
    "smokey-privileges-html": {
      "title": "Privileges",
      "content": "SmokeDetector operates a privilege system. That is, before you are able to use a number of commands (most notably the feedback commands), you must be added to a list of privileged users in SmokeDetector’s code.\n\nGetting reviewer privileges with SmokeDetector\nIn theory, anyone can be added to the privilege list. In practice, this doesn’t always work out, so as a general guideline, we look for a few things to indicate how qualified you are.\n\n\n  \n    Reputation\nA higher reputation score indicates a higher level of participation on the sites, which is strongly correlated with moderation ability. We’re looking for enough rep to indicate that you’ve been around a little while: generally, 300 on one site will suffice.\n  \n  \n    Participation\nWe can also simply look through your various accounts on the network. SmokeDetector scans posts for spam network-wide, so the more sites you have accounts on, the better it is for everyone — more accounts means you can flag spam on more sites. We may also look at how active you’ve been on various sites (and on their meta sites) to determine how able you are to moderate content effectively. Again, we’re not looking for a massive or exceptional record, just enough to show that you know what you’re doing.\n  \n  \n    Referral\nIf your request for privileges is supported by a regular of one of the chat rooms that SmokeDetector posts reports to, we’ll look more favourably upon it — we tend to trust people who are already part of the system to make sound judgements. Additionally, if you’ve been around in one of the rooms for a while and have made yourself known, you’ve got a good chance.\n  \n\n\nThese are all general guidelines, rather than hard limits. Really, we’re just checking to make sure that you’re a sane person who won’t abuse the system. We understand that there are cases of users who have little apparent activity who can be excellent at moderation; we’re also aware that the converse is true. Take note of what’s mentioned here, but also remember that requests are judged on a case-by-case basis.\n\nFor Moderators\nIf you’re a Stack Exchange network moderator, you’re automatically privileged with SmokeDetector in Charcoal HQ (and in SOCVR if you are a Stack Overflow moderator). You don’t need to be added to the explicit privilege lists, as your diamond also gives you privileges with SmokeDetector. We assume that moderators are, on the whole, pretty good at moderation.\n\nPrivilege Levels\n\nThere are multiple privilege levels on SmokeDetector and metasmoke, each giving you access to different commands, tools, etc. There isn’t any exact threshold that you have to meet in order to be eligible for many of these privileges; rather the admins will grant them to you at their own discretion. If you think that you should have some of these privileges but you don’t, please contact an admin.\n\n(SD) refers to privileges set in the code of SmokeDetector here, (MS) refers to privileges set from within metasmoke (admins: you’re looking for this page), and (GH) refers to privileges set on GitHub.\n\nSmokeDetector privileges (SD)\nThe process for acquiring these privileges is listed above. Note that this privilege only works per-chat-server, so if you’re privileged in CHQ, you’re not automatically privileged in SOCVR or the Tavern (due to your user ID being different), so you’ll need to contact an admin so that they can add you there as well.\n\nThis privilege level allows you to:\n\n  Give feedback via chat\n  Use the privileged commands listed here.\n  Stop autoflagging in the event of an emergency using !!/stopflagging. After this, autoflagging can only be re-enabled by an admin.\n\n\nTechnically, this privilege is granted in the Smoke Detector source code by adding the user’s numeric account ID to the privileged_users list for the room in question.  When this is in place, the !!/amiprivileged chat command will cause Smoke Detector to reply “✓ You are a privileged user”.\n\nReviewer (MS)\nEveryone who has SmokeDetector privileges is eligible to get the reviewer role. However, this process is not automatic, so you will need to sign up for a metasmoke account so that an admin can grant it to you.\n\nThis allows you to:\n\n  Review posts from the metasmoke review queue\n  Use applications which require the write API (e.g. userscripts such as FIRE and FDSC)\n  Associate your chat feedback with your metasmoke account when you connect your SE account (this should be done when you sign up, older users may need to do this manually)\n  Overwrite and invalidate your own feedback\n  Use the autoflagging conditions sandbox\n\n\nFlagger (MS)\nEveryone who signs up to metasmoke gets this by default. This privilege will be revoked if you abuse the system.\n\n  Allows you to set up your account so that it will be used for autoflagging\n\n\nCore (MS)\nGiven to people who have contributed to Charcoal in a non-trivial way (e.g. by giving 50+ feedbacks, contributing code, or frequenting CHQ). This signals that you are a core member of our team.\n\nBenefits include:\n\n  Increased autoflagging frequency (see this page for details)\n  Access to the data explorer\n  Can create new announcements (please don’t use this if you don’t know what you’re doing)\n  Can edit domain records, and add/edit domain tags\n\n\nCode admin a.k.a. blacklister (MS)\n\n\n  Can !!/watch and !!/blacklist without approval. Please make sure that you read the blacklisting guidelines before using these commands.\n  Can approve other user’s watches and blacklists on GitHub. Simply add a comment on the auto-generated PR containing the command !!/approve, and metasmoke will handle the rest. Note that you will need to be added to PullApprove for this to work properly (which in turn requires you to have a GitHub account which is known to us and added to the Other Awesome People team on GitHub); ping ArtOfCode and he will be able to set you up.\n  Can failover standby instances from the status page. Normally metasmoke handles this automatically if an instance goes down for more than 5 minutes, but you can use this if Smokey isn’t working properly. Make sure that you follow the troubleshooting guidelines first.\n\n\nGitHub push privileges a.k.a. proper code admin (GH)\n\nThese people have collaborator access on GitHub.\n\n\n  Can push code directly to GitHub, manage PRs and issues, and add people to the SmokeDetector privilege list.\n  ALWAYS PUSH TO MASTER, NEVER DEPLOY!\n  Generally it’s fine to directly push minor changes (e.g. privilege, blacklist, watchlist, regex, and spam check changes, bug fixes) to master without any reviews; it is recommended that you make a PR and ask for reviews on any major changes (e.g. refactoring, changed functionality, new commands, new rules)\n\n\nOne of the project’s owners on GitHub will add you as a collaborator to the correct repository by assigning you to the appropriate team on our GH organisation. Note: if you’re already part of the GH organisation, the team maintainer can also add you.\n\nSmokeDetector Runner (MS)\n\nNote that you can still run a SmokeDetector instance without this privilege; however its functionality will be limited without it.\n\n\n  Has a copy of the credentials for the SmokeDetector account on SE and GH\n  Has the ability to generate metasmoke integration tokens, required in order for Smokey to integrate with MS (e.g. feedbacks, privilege checks, autoflagging, etc)\n\n\nAdmin (MS)\n\nThese people get access to lots of administrative tools. They are able to see most data that is usually only visible to its owner, and perform system-level administration and maintenance tasks. All admins are also subscribed to the smokey@charcoal-se.org mailing list - any email sent to that address will reach the admins.\n\nThey can:\n\n\n  Manage privileges for all users\n  See posts which have been flagged for admin attention\n  Create API keys, edit them, and revoke write tokens, on the behalf of the application author\n  Invalidate other people’s feedback\n  Manually expire announcements\n  View, edit, enable/disable and delete other users’ autoflagging conditions\n  Invalidate autoflagging API tokens in the event of an emergency\n  Edit global autoflagging settings (e.g. enabled/disabled, min accuracy and post count, dry run, and max flags - note that the latter is also hard-coded for extra security)\n  Destroy domain records and domain tags\n  De-authorize a rogue SmokeDetector instance\n\n\nMS Developer (MS)\n\nOnly available to our benevolent dictators Art and Undo. Only Undo can grant this privilege level, by editing the database directly from the console.\n\n\n  Can see production logs\n  Can refresh the site list cache\n  Can refresh the per-post feedback cache\n  Can send messages down metasmoke’s websockets for testing and development purposes\n\n\n",
      "url": "/smokey/Privileges"
    },
  

  
    "ms-reasons-by-id-html": {
      "title": "Reasons by ID",
      "content": "Route Name\nReasons by ID\n\nRoute URL\n\n/api/reasons/:ids\n\n\n\nDescription &amp; Usage\nThis route allows you to get data about reasons by specifying their IDs. Replace :ids in the URL with a semicolon-delimited list of metasmoke reason IDs (which can be found on the metasmoke dashboard - look in the link to each reason), and all database fields on each reason will be returned.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/reasons/47;67\n\n\n\nResponse:\n\n{\n    \"items\":[\n        {\n            \"id\":47,\n            \"reason_name\":\"Phone number detected in title\",\n            \"last_post_title\":\"1.8.0.0. .8.4.1. 6.4.3.6. N.e.t.f.l.i.x C.u.s.t.o.me.r. S.u.p.po.r.t P.h.on.e N.u.mb.e.r\",\n            \"inactive\":false,\n            \"weight\": 71,\n            \"maximum_weight\": null\n        },\n        {\n            \"id\":67,\n            \"reason_name\":\"Black magic in title\",\n            \"last_post_title\":\"black magic Specialist 9928749449\",\n            \"inactive\":false,\n            \"weight\": 68,\n            \"maximum_weight\": null\n        }\n    ],\n    \"has_more\":false\n}\n\n\n",
      "url": "/ms/Reasons-by-ID"
    },
  

  
    "ms-report-post-html": {
      "title": "Report Post",
      "content": "Route Name\nReport Post\n\nRoute URL\n\n/api/w/post/report\n\n\n\nDescription &amp; Usage\nUse this route to report a post as spam to SmokeDetector. This functions the same as the !!/report command for SmokeDetector in chat, and is implemented by simply sending the details of the report across a websocket connection to SmokeDetector for it to deal with the reporting itself. Use the post_link query string parameter to specify a link to the post you want to report.\n\nSince we have no way of knowing the final status of the sent data, this route always returns 201 Created and the plaintext response OK.\n\nExample\nRequest (key and token omitted):\n\nPOST /api/w/post/report?post_link=//drupal.stackexchange.com/q/433924 HTTP/1.1\n\n\n\nResponse (status 201):\n\nOK\n\n\n",
      "url": "/ms/Report-Post"
    },
  

  
    "ms-search-posts-html": {
      "title": "Search Posts",
      "content": "Route Name\nSearch Posts\n\nRoute URL\n\n/api/posts/search\n\n\n\nDescription &amp; Usage\nThis route is a unification of a number of other routes, including Posts by Feedback, Posts by Site, and Posts by Date Range. More exact documentation for the parameters of this route is available within the documentation for these individual routes. What follows is a list of available parameters for this route:\n\n\n  feedback_type\n  from_date\n  to_date\n  site\n\n\nExample\nPlease refer to the individual route documentation for examples of the kind of data returned. This route returns an array (list) of posts, which is the same type returned by each individual route.\n",
      "url": "/ms/Search-Posts"
    },
  

  
    "smokey-set-up-autoflagging-html": {
      "title": "Set Up Autoflagging",
      "content": "This document provides instructions on how to set up your account to cast automatic flags via the SmokeDetector/metasmoke system.  The facility is described in brief on the Autoflagging wiki page.\n\nPrerequisites\nBefore running through the rest of these instructions, ensure that:\n\n\n  You have an account on metasmoke. You can get one of those here, if you don’t have one.\n  Your metasmoke account has the “flagger” permission. You can check that here: find your username, and look for the “flagger” role. Ask an admin about this if you don’t have it.\n  Autoflagging and registrations are enabled. You can check these under system settings; verify that the flagging_enabled and registration_enabled settings have a value of 1.\n  Your metasmoke account is write-access authenticated. If you don’t know whether it is or not, it’s probably not – visit the authentication status page to authenticate.\n\n\nSet Up Autoflagging\n\n  Enable flags on your account.\nVisit your preferences page, and read through the red-boxed disclaimer. If you’re happy with that, tick the box to enable flags on your account.\n  Set up preferences.\nOn the same preferences page, click “Set up preferences” near the bottom of the page. The page you’re taken to lets you set up your preferences, which govern how many of your flags the system can use on any particular site or group of sites. Fill in the maximum number you’d like to allocate, select the sites you want that number to apply to, and click Save. You can repeat this process to have different maxima for different groups of sites.\n  Set up conditions.\nVisit the flag conditions setup page. This page lets you set up combinations of conditions governing how certain you want the system to be that a post is spam before using your account to flag it. The minimum weight controls the minimum cumulative weight of all the reasons a post was caught by (the maximum weight a reason can have is 100; we suggest 280 is a good value for this field). The maximum poster rep controls the most reputation a post author can have. The minimum reason count controls how many reasons you want a post to have been caught by — this performs a similar function to minimum weight. Fill in some values, and click Save. Again, you can repeat this process to have different accuracies for different groups of sites.\n\n\n\n  N.B. There’s a threshold of accuracy that all flagging conditions must meet before they’re used to cast flags automatically. Currently, this is 99.9% — if you want to get the current value of this threshold, it’s stored as the min_accuracy system setting. You can use the Preview button during condition setup to find out how accurate your proposed parameters are.\n\n\nAt this point, you should be set up and your account will be used to cast spam flags according to the parameters you’ve specified. If you’ve found any bugs, or have feedback on the system, let us know. If you’ve found a security bug, please read and follow these instructions rather than posting publicly.\n\nI Opted In, But I Don’t See Any Flags\n\nA large number of volunteers have signed up to donate their flags (thanks, everyone!) so the pool of available flags is currently much larger than the actual need.\n\nThere is a prioritization mechanism in place which favors autoflags from Metasmoke users who have “core” status. This is to reward them for their contributions to Charcoal (e.g. flagging and giving feedback, contributing code, and participating in discussions in CHQ). Generally, for posts that receive 3 autoflags, 2 will be cast by core users and the other one will be cast by a non-core user.\n",
      "url": "/smokey/Set-Up-Autoflagging"
    },
  

  
    "ms-set-up-local-instance-of-metasmoke-ubuntu-16-04-html": {
      "title": "Installing Ruby and Rails",
      "content": "Installing Ruby and Rails\n\nSteps in this section are taken from a Digital Ocean tutorial\n\n\n  \n    Add RVM’s key to the system\n\n     gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\n\n    \n  \n  \n    Move to /tmp and start the install of the latest stable version of Rails\n\n     cd /tmp\n \\curl -sSL https://get.rvm.io -o rvm.sh\n cat /tmp/rvm.sh | bash -s stable --rails\n\n    \n  \n  \n    source the RVM scripts (insert your user’s name in the command)\n\n     source /home/USERNAMEHERE/.rvm/scripts/rvm\n\n    \n  \n  \n    You should now be able to run ruby --version and get a response\n  \n\n\nSetting up metasmoke\n\n\n  \n    Clone the metasmoke repository (or your fork) to a directory of your choice (probably not /tmp)\n\n     git clone https://github.com/Charcoal-SE/metasmoke.git\n\n    \n  \n  Navigate to the repository you just cloned\n  \n    Install a couple needed gems\n\n     gem install bundler \n\n    \n  \n  \n    Install the metasmoke bundles\n\n     bundle install\n\n    \n  \n  \n    If there are any errors with the previous step, you will need to correct those before proceeding. The most common one is with MySQL and is usually solved by running and then repeating the previous step\n\n     sudo apt-get install libmysqlclient-dev\n gem uninstall mysql2\n gem install mysql2\n\n    \n  \n  When the bundle install has completed, you’ll get a notice about how to restart Passenger.\n  \n    Log into MySQL with a user that has permissions to create a database and users. root may work best\n\n    mysql -u root -p\n\n    \n  \n  \n    Create the metasmoke database and metasmoke_test database\n\n    CREATE DATABASE metasmoke;\nCREATE DATABASE metasmoke_test;\n\n    \n  \n  \n    Create the metasmoke user and password. This user will only be able to access MySQL locally. You should still select a strong password. Grant this user privileges on the metasmoke database\n\n    CREATE USER 'metasmoke'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON `metasmoke`.* TO `metasmoke`@`localhost`;\nGRANT ALL PRIVILEGES ON `metasmoke_test`.* TO `metasmoke`@`localhost`;\nFLUSH PRIVILEGES; \n\n    \n  \n  \n    Inside the metasmoke folder, from the command line, copy the database.sample.yml to database.yml:\n\n    cd config\ncp database.sample.yml database.yml\n\n    \n  \n  \n    Open database.yml in your editor of choice. Replace the development: section with something like this, using your password on the password line:\n\n    development:\n  adapter: mysql2\n  database: metasmoke\n  encoding: utf8\n  username: metasmoke\n  password: yourpass\n  host: 127.0.0.1\n  port: 3306\n\n    \n  \n\n\nIf there are any adapter: sqlite3 databases in there, remove them if you don’t need them, or convert them to adapter: mysql2.\n\n\n  \n    Copy the sample configuration to config.yml\n\n    cp config.sample.yml config.yml\n\n    \n  \n\n\nIf you want integrations to work, you will need to update the file with real credentials for SES, Github, and/or StackExchange.  The redirect URLs in the Stack Exchange settings should point back to your instance.\n\n\n  \n    You need to have Redis up and running, too.\n\n    sudo apt-get install -y redis-server\n\n    \n  \n\n\nIf you are unable to find Redis for your platform (because you are on something older or just different than a reasonably recent Ubuntu or Debian), see their installation instructions at https://redis.io/download#installation\n\n\n  \n    Time to set up the metasmoke database. Navigate back to the metasmoke root directory (you are probably in metasmoke/config right now)\n\n    rails db:create\nrails db:schema:load\nrails db:seed \n\n    \n  \n  \n    Update nodejs\n\n    curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - \nsudo apt-get install nodejs \n\n    \n  \n  \n    Yarn needs to be installed to properly serve the web content\n\n    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt-get update &amp;&amp; sudo apt-get install yarn\nyarn install\n\n    \n  \n  \n    Start the local server\n\n    foreman start\n\n    \n  \n  \n    Your local instance of metasmoke is now on http://localhost:5000\n  \n\n\nTo actually use it, you’ll want to use the “Sign up” button in the web UI to create a local user, then assign admin and developer roles to this first user from the console:\n\n    rails c\n\n\n\nAt the irb prompt, type\n\n    User.first.add_role(:admin)\n    User.first.add_role(:developer)\n\n\n\n(There will be a significant amount of output from Rails after each of these commands, showing how the roles table is updated with a new role, and then the user is assigned this role.)\n",
      "url": "/ms/Set-up-local-instance-of-metasmoke-(Ubuntu-16.04)"
    },
  

  
    "ms-smoke-detectors-html": {
      "title": "Smoke Detectors",
      "content": "Route Name\nSmoke Detectors\n\nRoute URL\n\n/api/smoke_detectors\n\n\n\nDescription &amp; Usage\nThis route supplies a list of smoke detectors.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/smoke_detectors\n\n\n\nResponse:\n\n{\n    \"items\":[\n        {\n            \"id\": 1,\n            \"last_ping\": \"2017-02-06T23:20:50.000Z\",\n            \"name\": null,\n            \"location\": \"Redacted Location\",\n            \"created_at\": \"2016-02-20T23:25:32.000Z\",\n            \"updated_at\": \"2017-08-25T18:11:07.000Z\",\n            \"email_date\": \"2017-02-05T03:36:04.000Z\",\n            \"user_id\": 1,\n            \"is_standby\": false,\n            \"force_failover\": false,\n            \"status_color\": \"good\"\n        },\n        {\n            \"id\": 2,\n            \"last_ping\": \"2017-10-07T00:13:05.000Z\",\n            \"name\": \"Temp Smokey\",\n            \"location\": \"Redacted Location\",\n            \"created_at\": \"2016-05-09T20:21:30.000Z\",\n            \"updated_at\": \"2017-10-07T00:13:05.000Z\",\n            \"email_date\": \"2017-05-24T07:18:08.000Z\",\n            \"user_id\": 7,\n            \"is_standby\": false,\n            \"force_failover\": false,\n            \"status_color\": \"critical\"\n        }\n    ],\n    \"has_more\":false\n}\n\n\n",
      "url": "/ms/Smoke-Detectors"
    },
  

  
    "smokey-smokedetector-statuses-html": {
      "title": "SmokeDetector Statuses",
      "content": "SmokeDetector can restart into one of three different statuses:\n\n\n  Standard mode\n  Standby mode\n  Reverted mode\n\n\nStandby mode\n\nSmokeDetector can be run in standby mode as a backup copy, just in case the main Smokey breaks down.\nWhile in Standby mode, SmokeDetector will not make reports in chat, send posts to Metasmoke or listen\nto commands.\n\nStandby mode can be deactivated by running the !!/failover command. This will restart a backup \ninstance so that it begins to run like the standard SmokeDetector.\n\n\n  SmokeDetector host note: you can run python3 nocrash.py standby to start Smokey directly into Standby mode.\n\n\nReverted Mode\n\nSmokeDetector switches to Reverted Mode when it detects that errors occur in the running version: it goes back to a previous version. When SmokeDetector is in reverted mode, any privileged user can switch back to the master branch using the !!/master command when that’s necessary.\n",
      "url": "/smokey/SmokeDetector-Statuses"
    },
  

  
    "ms-spam-last-week-html": {
      "title": "Spam Last Week",
      "content": "Route Name\nSpam Last Week\n\nRoute URL\n\n/api/spam/last_week\n\n\n\nDescription &amp; Usage\nThis route allows you to retrieve data about how many posts were marked as spam and were true positives, for each website in the past week.\n\nExample\nRequest:\n\nHTTP/1.1 GET /api/spam/last_week\n\n\n\nResponse:\n\n{\n    \"3D Printing\": 6,\n    \"Academia\": 4,\n    \"Android Enthusiasts\": 7,\n    \"Anime &amp; Manga\": 4,\n    \"Arduino\": 4,\n    \"Arqade\": 5,\n    \"Ask Different\": 64,\n    \"Ask Patents\": 3,\n    \"Ask Ubuntu\": 222,\n    \"Astronomy\": 30,\n    \"Aviation\": 1,\n    \"Biblical Hermeneutics\": 1,\n    \"Bicycles\": 1,\n    \"Biology\": 1,\n    \"Bitcoin\": 9,\n    \"Chemistry\": 2,\n    \"CiviCRM\": 1,\n    \"Code Review\": 1,\n    \"Computer Graphics\": 1,\n    \"Computer Science\": 2,\n    \"Craft CMS\": 1,\n    \"Database Administrators\": 1,\n    \"Drupal Answers\": 59,\n    ...\n}\n\n\n",
      "url": "/ms/Spam-Last-Week"
    },
  

  
    "ms-undeleted-posts-html": {
      "title": "Undeleted Posts",
      "content": "Route Name\nUndeleted Posts\n\nRoute URL\n\n/api/posts/undeleted\n\n\n\nDescription &amp; Usage\n\nThis route provides a list of posts that have not been recorded as being deleted. (Technically, this means posts that don’t have a DeletionLog record associated with them.) Be aware: being listed on this route does not necessarily mean that the post is not deleted, only that we didn’t record a deletion. Due to system design limitations, we don’t always record a post being deleted. You should also check for deletion by attempting to fetch the post from Stack Exchange.\n\nExample\nRequest:\n\nGET /api/posts/undeleted HTTP/1.1\n\n\n\nResponse:\n\n{\n    \"id\": 88844,\n    \"title\": \"Should I switch/rollover my IRA to a Gold IRA at Regal Assets?\",\n    \"body\": \"&lt;truncated&gt;\",\n    \"link\": \"//money.stackexchange.com/a/86039\",\n    \"site_id\": 31,\n    \"user_link\": \"https://money.stackexchange.com/users/63591/viktor\",\n    \"username\": \"Viktor\",\n    \"why\": \"Body - Position 203-214: wixsite.com, Position 275-286: wixsite.com Post - Keyword *visit my blog* with link &lt;a href=\"https://goldirainvestments3.wixsite.com/blog\"\",\n    \"user_reputation\": 1,\n    \"stack_exchange_user_id\": 77713,\n    \"is_tp\": false,\n    \"is_fp\": false,\n    \"is_naa\": false,\n    \"deleted_at\": null\n}\n\n\n",
      "url": "/ms/Undeleted-Posts"
    },
  

  
    "ms-users-html": {
      "title": "Users",
      "content": "Route Name\nUsers\n\nRoute URL\n\n/api/users\n\n\n\nDescription &amp; Usage\nThis route supplies a list of metasmoke users, optionally filtered by role.\n\nAdding the option role query string parameter and providing one of the available metasmoke roles will filter the list of users that are returned. Currently, the available roles are:\n\n\n  reviewer\n  admin\n  code_admin\n  developer\n  flagger\n  core\n  smoke detector runner\n\n\nExample\nRequest:\n\nGET /api/users HTTP/1.1\n\n\n\nResponse:\n\n{\n  \"items\": [\n    {\n        \"id\": 1,\n        \"username\": \"Undo\",\n        \"stackexchange_chat_id\": 73046,\n        \"meta_stackexchange_chat_id\": 215468,\n        \"stackoverflow_chat_id\": 1849664,\n        \"stack_exchange_account_id\": 1703573,\n        \"moderator_sites\": [\n          {\n              \"id\": 1,\n              \"site_name\": \"Stack Overflow\",\n              \"site_url\": \"https://stackoverflow.com\",\n              \"site_logo\": \"https://cdn.sstatic.net/Sites/stackoverflow/img/favicon.ico\",\n              \"site_domain\": \"stackoverflow.com\",\n              \"created_at\": \"2015-09-07T02:25:11.000Z\",\n              \"updated_at\": \"2017-09-16T18:33:57.000Z\",\n              \"flags_enabled\": false,\n              \"max_flags_per_post\": 3,\n              \"is_child_meta\": false,\n              \"last_users_update\": \"2017-09-16T18:33:57.000Z\"\n          }\n    },\n  ],\n  \"has_more\": true\n}\n\n\n",
      "url": "/ms/Users"
    },
  

  
    "ms-valid-feedback-types-html": {
      "title": "Valid Feedback Types",
      "content": "Route Name\nValid Feedback Types\n\nRoute URL\n\n/api/post/:id/valid_feedback\n\n\n\nDescription &amp; Usage\nThis route provides details of valid feedback types for a given post ID. This is an almost-constant value, but changes depending on whether the queried post is a question or an answer: NAA-type feedback is valid for answers, but not questions.\n\nThis route is not paginated.\n\nExample\nRequest:\n\nGET /api/post/20191/valid_feedback HTTP/1.1\n\n\n\nResponse:\n\n[\n  {\n    \"type\": \"tp\",\n    \"description\": \"True positive\"\n  },\n  {\n    \"type\": \"tp-\",\n    \"description\": \"True positive (silent)\"\n  },\n  {\n    \"type\": \"tpu\",\n    \"description\": \"True positive, blacklist user\"\n  },\n  {\n    \"type\": \"tpu-\",\n    \"description\": \"True positive, blacklist user (silent)\",\n    \"aliases\": [\"k\"]\n  },\n  {\n    \"type\": \"k\",\n    \"description\": \"True positive, blacklist user (silent)\",\n    \"alias_for\": \"tpu-\"\n  },\n  {\n    \"type\": \"fp\",\n    \"description\": \"False positive\"\n  },\n  {\n    \"type\": \"fp-\",\n    \"description\": \"False positive (silent)\",\n    \"aliases\": [\"f\"]\n  },\n  {\n    \"type\": \"fpu\",\n    \"description\": \"False positive, whitelist user\"\n  },\n  {\n    \"type\": \"fpu-\",\n    \"description\": \"False positive, whitelist user (silent)\"\n  },\n  {\n    \"type\": \"f\",\n    \"description\": \"False positive (silent)\",\n    \"alias_for\": \"fp-\"\n  }\n]\n\n\n",
      "url": "/ms/Valid-Feedback-Types"
    },
  

  
    "ms-websocket-api-html": {
      "title": "WebSocket API",
      "content": "The metasmoke websocket API allows you to have events pushed to you as they happen, which is useful to avoid having to poll the HTTP API for changes. You can subscribe to events from any model by specifying which models you want to watch when you connect.\n\nNote: I recommend you use an ActionCable client rather than trying to communicate directly with the websocket - the latter is possible, but AC is weird enough that you’re better off letting someone else do that hard work for you. This documentation assumes you’re using the ActionCable JS client.\n\nConnection\nCreate a consumer using your ActionCable client. The consumer is the underlying connection to the websocket.\n\nconst socket = ActionCable.createConsumer('wss://metasmoke.erwaysoftware.com/cable');\n\n\n\nUsing that consumer, you now need to create a subscription to the API channel. At this point, you need to specify both your API key, and which models you want to receive events from.\n\nsocket.subscriptions.create({\n  channel: 'ApiChannel',\n  key: 'abcdef012345',\n  events: 'posts;feedbacks;flag_logs'\n}, {\n  received: function (message) {\n    console.log(message);\n  }\n});\n\n\n\nWith the subscription above, you will be sent an event every time a post, feedback, or flag log is created or updated.\n\nSpecifying event types\nWith the example above, you will be sent all events for each model you specify - currently, that’s creates and updates. You can optionally specify which events you want sent to you by including them in your subscription creation, using this syntax:\n\nsocket.subscriptions.create({\n  channel: 'ApiChannel',\n  key: 'abcdef012345',\n  events: 'statistics#create,update;posts#create'\n}, {\n  received: function (message) {\n    console.log(message);\n  }\n});\n\n\n\nThis example will result in you being sent events when a post is created, and when a statistic is created or updated.\n\nEvents\nThe full message sent to you by the websocket looks like this:\n\n{\"identifier\":\"{\\\"channel\\\":\\\"ApiChannel\\\",\\\"key\\\":\\\"abcdef012345\\\",\\\"events\\\":\\\"announcements\\\"}\",\"message\":{\"event_type\":\"create\",\"event_class\":\"Announcement\",\"object\":{\"id\":8,\"text\":null,\"expiry\":null,\"created_at\":\"2017-07-29T23:41:59.000Z\",\"updated_at\":\"2017-07-29T23:41:59.000Z\"}}}\n\n\n\nYour ActionCable client will most likely decode that for you, and just provide you with the event data itself, which looks like this:\n\n{\n  \"event_type\": \"create\",\n  \"event_class\": \"FlagLog\",\n  \"object\": { ... }\n}\n\n\n\n\n  The event_type parameter reflects what kind of event caused the message - a new object being created, or an existing object being updated.\n  The event_class parameter is the model class name of the object concerned (such as Post or FlagLog).\n  The object parameter is the object itself: all the fields from that object’s database row, minus any sensitive data like API tokens.\n\n",
      "url": "/ms/WebSocket-API"
    },
  

  
    "code-html": {
      "title": "Code",
      "content": "Website built from:\n\n\n  commit 7e17f46 on Charcoal-SE/charcoal-se.github.io\n  commit a46b1a6 on the Charcoal-SE/SmokeDetector wiki\n  commit 1e216a7 on the Charcoal-SE/metasmoke wiki\n  commit 4b5eb30 on Charcoal-SE/charcoal-jekyll-theme\n\n\nThis site is powered by Jekyll v3.4.2\n",
      "url": "/code"
    },
  

  
    "announcements-feed-json": {
      "title": "feed.json",
      "content": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": \"Charcoal Announcements\",\n  \"description\": \"Announcements from Charcoal\",\n  \"home_page_url\": \"https://charcoal-se.org/\",\n  \"feed_url\": \"https://charcoal-se.org//announcements/feed.json\",\n  \n  \"items\": [\n\n    \n    {\n      \"id\": \"https://charcoal-se.org//announcements/test-announcement.html\",\n      \"url\": \"https://charcoal-se.org//announcements/test-announcement.html\",\n      \"title\": \"Test Announcement\",\n      \n      \"content_html\": \"Announcement here — don’t forget to edit the filename to include the title.\\n\",\n      \n      \"date_published\": \"Wed, 07 Jun 2017 00:00:00 +0000\"\n      },\n    \n    {\n      \"id\": \"https://charcoal-se.org//announcements/first-announcement.html\",\n      \"url\": \"https://charcoal-se.org//announcements/first-announcement.html\",\n      \"title\": \"Announcements are now a thing\",\n      \n      \"content_html\": \"Visit your account settings to turn on emails for new announcements.\\n\",\n      \n      \"date_published\": \"Wed, 07 Jun 2017 00:00:00 +0000\"\n      }\n    \n  ]\n}\n",
      "url": "/announcements/feed.json"
    },
  

  
    "announcements-feed-xml": {
      "title": "feed.xml",
      "content": "\n\n  \n    Charcoal - Announcements\n    Announcements from Charcoal\n    https://charcoal-se.org/\n    \n    \n      \n        Test Announcement\n        \n          &lt;p&gt;Announcement here — don’t forget to edit the filename to include the title.&lt;/p&gt;\n\n        \n        Wed, 07 Jun 2017 00:00:00 +0000\n        https://charcoal-se.org//announcements/test-announcement.html\n        https://charcoal-se.org//announcements/test-announcement.html\n      \n    \n      \n        Announcements are now a thing\n        \n          &lt;p&gt;Visit your &lt;a href=&quot;https://metasmoke.erwaysoftware.com/users/edit&quot;&gt;account settings&lt;/a&gt; to turn on emails for new announcements.&lt;/p&gt;\n\n        \n        Wed, 07 Jun 2017 00:00:00 +0000\n        https://charcoal-se.org//announcements/first-announcement.html\n        https://charcoal-se.org//announcements/first-announcement.html\n      \n    \n  \n\n",
      "url": "/announcements/feed.xml"
    },
  

  
    "flagging-html": {
      "title": "Autoflagging",
      "content": "Autoflagging\n\n\n  What is autoflagging?\n\n  Autoflagging is a project to enable us to flag Stack Exchange posts as spam automatically, based on data we’ve previously collected through SmokeDetector and metasmoke.\n\n  It’s built into the existing system - SmokeDetector sends the same data to metasmoke as it always has, and metasmoke performs some automated analysis of the post it’s just received to determine if it should cast spam flags or not.\n\n\n  But that’s dangerous!\n\n  Powerful, yes. Dangerous, less so. In designing the flagging system, we’ve thought through the concerns about doing this and addressed them where necessary.\n\n  \n    Concern: System unilaterally nukes a post that wasn’t spam\nMitigation: We limit the maximum number of flags the system is allowed to cast on a single post. Additionally, false positives are rare.\n    Concern: System is faulty/flags things it shouldn’t/otherwise goes wrong\nMitigation: Users with SmokeDetector privileges have access to a command that immediately halts all flagging activity, and requires administrator intervention to reactivate.\n    Concern: System is inaccurate, with a high number of false positives\nMitigation: We make use of past categorised data to select accurate capture reasons, and only flag based on accurate combinations.\n  \n\n\n  But what about privacy?\n\n  There are some privacy concerns with this system. The major one of those is about API write tokens: to be able to cast flags, we need a write token for the Stack Exchange API, which needs to be stored somewhere within metasmoke. This means that whoever hosts metasmoke has access to those tokens, and could use them to carry out any action on the token owner’s account.\n\n  We deal with this by having clear, prominent disclaimers on metasmoke where any privacy issues are raised. These disclaimers detail exactly what a user is signing up for when clicking a link or button, and what privacy concerns there are. It is then left up to the user to make their own judgement about whether to trust the host.\n\n  The other concern is making sure users are aware that autoflags aren’t a get-out-of-jail-free card: flags cast on a Stack Exchange account are the responsiblity of the account holder, whether they were cast by an automated system or not, and bad flagging may result in moderators getting involved. This is partially mitigated by mandating accuracy in the system - while users are given some leeway to what the system can flag with their account, a 99.5% accuracy ratio over a sample of 1000 posts is mandatory. There is also another disclaimer used to detail the relevant concerns before users sign up for autoflagging.\n\n\n  Is it any good?\n\n  Yep. As mentioned previously, users are given some leeway to choose how accurate they want autoflags cast using their account to be, but all autoflags must be cast under a policy that is at least 99.5% accurate over a sample of 1000 posts. The suggested flag policy (also known as a flag condition) has an accuracy of 99.98%.\n\n\n  How does it work?\n\n  Warning: this bit is technical.\n\n  The basic design of the system hasn’t changed. SmokeDetector sends data about posts it thinks are spam to metasmoke. This data includes data about the post itself, and data about why the post was detected. We call the latter “reasons” - we have a reason that catches bad keywords, a reason for known spam websites, and reasons for other common characteristics of spam.\n\n  Users can provide feedback to SmokeDetector, either by replying to the bot in chat, or through review on metasmoke. All feedback eventually ends up attached to the relevant post in metasmoke’s database. We use this feedback to keep track of how accurate each reason is, and then assign a weight to each reason which is equal to its percentage accuracy to the nearest integer.\n\n  When users sign up for autoflagging, they are asked to create conditions that govern which posts their account can flag. This is done in terms of a minimum total reason weight, a maximum author reputation, and a minimum number of reasons. These are checked against the database of posts and feedback to work out how accurate the condition is, which is how we ensure conditions are at least 99.9% accurate.\n\n  When a post is sent to metasmoke, the system works out if any conditions allow it to flag the post. If they do, the condition owner’s account is used to cast a spam flag, and this process is repeated until the post reaches a maximum number of flags cast.\n\n",
      "url": "/flagging"
    },
  

  
    "announcements": {
      "title": "Announcements",
      "content": "Announcements\n\n\n  Test Announcement\n    \n      Announcement here — don’t forget to edit the filename to include the title.\n    \n  \n  Announcements are now a thing\n    \n      Visit your account settings to turn on emails for new announcements.\n    \n  \n\n\n",
      "url": "/announcements/"
    },
  

  
    "smokey": {
      "title": "Home",
      "content": "SmokeDetector is a headless chatbot that detects spam and posts it to chatrooms.\nIt uses ChatExchange and takes questions from the Stack Exchange realtime tab. For more information on how it works, see our website at charcoal-se.org.\n\n\n\nUser information\n\n\n  \n    You can find a list of SmokeDetector’s commands on the commands page.\n  \n  \n    Find a list of chatrooms that SmokeDetector interacts with on the chat rooms page.\n  \n  \n    If you’re thinking about asking for privileges, take a look at the privileges page.\n  \n  \n    To find out what’s expected of members of Charcoal, check out our expected behaviour and procedures page\n  \n  \n    If you’re looking for guidance on feeding back to SmokeDetector, read the feedback guidance.\n  \n  \n    If you want to know when it is appropriate to blacklist or watch something, check out the guidance for blacklisting and watching.\n  \n\n\nDeveloper information\n\n\n  \n    For information on how to write a new check for spam, see the documentation for creating new spam checks.\n  \n  \n    If you wish to integrate with Smokey and Metasmoke via our API, see the API docs.\n  \n  \n    For information on our build process, see Build Infrastructure.\n  \n\n\n\nGlossary:\n\n\n  \n    Blacklist - list of users whose every question or answer will be posted to the appropriate chatrooms. This should be used only for spammers or for users whose posts merit abusive/offensive flags.\n  \n  \n    Whitelist - list of users which are free from username checks on their posts. Title and body will still be checked.\n  \n\n",
      "url": "/smokey/"
    },
  

  
    "ms": {
      "title": "Home",
      "content": "This is the wiki page for metasmoke, a web application hosted on https://metasmoke.erwaysoftware.com that tracks reports and feedback from the Smoke Detector bot active on Stack Exchange.\n\nIf you’re looking for the Metasmoke API Documentation, go here.\n",
      "url": "/ms/"
    },
  

  
    "": {
      "title": "Home",
      "content": "we are charcoal\n\n\n  Autoflagging\n\n  Charcoal are currently running an autoflagging initiative,\nto flag spam posts automatically based on past collected data.\nTo find out more, go to Autoflagging.\n\n\nCharcoal are the people behind\nSmokeDetector,\na community bot to detect spam on the\nStack Exchange network.\n\n\n  What is SmokeDetector?\n\n  SmokeDetector is a headless chatbot, written in Python, that scans\nall new and updated content across the Stack Exchange network to try to detect spam.\nAnd by ‘everything’, we mean ‘everything’ - that’s every new post, on every SE site,\nplus every edit and other update.\nIf it appears on the Stack Exchange-wide\nreal-time page,\nSmokey has seen it.\nThat’s about 100,000 posts scanned every day.\nAlso, the bot is pretty accurate these days -\nsome of the reasons that trip our filters have an accuracy of over 99%.\n\n  It’s administered and developed by the team of people you can find in\nCharcoal HQ,\nour co-ordination chatroom.\nThat’s also where the posts that Smokey thinks are spam get reported to.\n\n  A slightly more detailed introduction is available in this Meta post from early 2017:\nCan a machine be taught to flag spam automatically?\n\n  Fact: If you wrote all our spam tests out vertically at point size 36, they’d be as tall as the\nOne World Trade Center.\n\n\n  How does it work?\n\n  Warning: technical programming details ahead.\n\n  SmokeDetector sets up a websocket connection to the same feed that powers the\nStack Exchange realtime page.\nThis websocket provides us with the feed of posts to scan.\n\n  Every time a post comes in, we grab the full details of the post from the\nStack Exchange API.\nRequests are bundled up wherever possible to save on our\n10,000 requests per day API quota.\nOnce we have the details, including the full text of the body,\nwe run the post’s body text, title, and owner’s username through\na whole load of tests,\nincluding several miles of regex (not literally)\nto determine whether or not the post is spam.\n\n  If we determine that the post is spam, we post a report of that fact\nto Charcoal HQ (and to some other chatrooms, based on certain conditions).\nThis report is the cue for some humans to go and look at the post, check if it’s spam,\nand flag it if so.\nThis gets spam posts destroyed quickly.\nThose humans can then feed back to SmokeDetector\nto say whether the report was correct or not.\nWe store this feedback in our web dashboard,\nmetasmoke,\nwhich is itself complex enough that it’s a story for another day.\n\n  Since early 2017, we also have the possibility to automatically\nflag a post on behalf of volunteers who signed up for autoflagging.\nA post will never receive more than three of these automatic flags;\nwe want to make sure every post is also reviewed by humans.\n\n\n  Want to get involved?\n\n  Anybody is welcome to get involved; the best way to do this is to drop into\nCharcoal HQ\nand observe.\nGet yourself familiar with what goes on there;\nchat to some of the regulars about the system,\nand you’ll figure out how to get involved.\n\n  Eventually, when you’re familiar with the system,\nyou’ll need to ask to be added to the privilege whitelist\nso that you can interact with SmokeDetector.\nThere’s a wiki page\nabout that you should read before you ask;\nit’ll give you some guidance about what we need from you and what you need to do.\nThere’s also a page with who to ping\nwhich enumerates the persons who are responsible for various parts\nand various privileges.\n\n\n  For developers\n\n  If you’re interested in integrating with the SmokeDetector system, we have an\nAPI that you can use to get stats about the system\nand to perform a limited set of write operations.\nAgain, drop into chat for more information,\nor the docs are all available in the\nmetasmoke wiki.\n\n",
      "url": "/"
    },
  

  

  
    "pings-mods-html": {
      "title": "Mods to Ping",
      "content": "Mods to Ping\n\nIf something has gone wrong on a site (spam flags wrongly declined etc.), these mods might be able to help:\n\n\n\n  \n    Loading…\n  \n\n\n\nAre you a mod, but your name doesn’t show up on this list? If you’re freshly elected, please check again in 24 hours. Otherwise, authenticate on this page. Again, the sites you’re a mod on will show up in less than 24 hours.\n\n\n\n",
      "url": "/pings/mods"
    },
  

  
    "ms-urls-html": {
      "title": "Convert URLs",
      "content": "Convert\nConvert Stack Exchange URLs to metasmoke URLs\n\n\n\n\n  \n  \n  \n\n\n\n\n\n\n",
      "url": "/ms-urls"
    },
  

  
    "people-html": {
      "title": "People",
      "content": "People\n\nThese are the people who make it all work. People in bold have credentials to run SmokeDetector, including metasmoke integration tokens. People with (RO) after their names are room owners.\n\nIf you’re wondering who you should talk to about something, there’s a guide for that.\n\n\n  Administrators\n\n  These people get pinged a lot. (GH) indicates a GitHub organisation admin, and (MS) indicates an admin on metasmoke.\n\n  \n    Undo (GH, MS, RO)\n    ArtOfCode (GH, MS, RO)\n    Andy (MS, RO)\n    angussidney (MS, RO)\n    tripleee (MS, RO)\n  \n\n\n  Developers\n\n  These people have at some point contributed code of some variety, whether it be to Smokey, MS or a userscript. If you’re wondering why you’re not on the list, there’s a threshold at play here to stop the list getting too long.\n\n  \n    hichris123 (admin emeritus)\n    zaq\n    ProgramFOX (RO)\n    ManishEarth (RO)\n    Ferrybig (RO)\n    Thomas Ward (RO)\n    Brock Adams\n    rene\n    Glorfindel\n    J F\n    Cerbrus\n    quartata\n    Henders\n  \n\n\n\n  Spam checks maintainers\n\n  These people help out by adding to and maintaining the miles of regexes and blacklists which do all the heavy lifting in detecting spam.\n\n  \n    Ashish Ahuja\n    Magisch\n    dorukayhan\n    doppelgreener\n    Mithrandir\n    NobodyNada (RO)\n    suraj\n    John Dvorak\n    Yvette Colomb\n  \n\n\n\n  Team Members\n\n  These people contribute in other ways, such as flagging, giving feedback, making the rest of us laugh, and being all-round cool people.\n\n  \n    M.A.R.\n    Kyll\n    DavidPostill\n    Kaz Wolfe\n    Byte Commander\n    DJMcMayhem\n    CalvT\n    QPaysTaxes\n    Nisse Engström\n    bummi\n  \n\n",
      "url": "/people"
    },
  

  
    "scripts-html": {
      "title": "Userscripts",
      "content": "Userscripts  Build status loading…\n\n\n  Loading…\n\n\nOther Userscripts\n\n\n  Stack Exchange Global Flag Summary (Stack Apps post)\n  AutoReviewComments (Stack Apps post) (Enter https://charcoal-se.org/userscripts/charcoal-autocomments/comments.js into the remote dialog box)\n\n\n\n\n\n\n",
      "url": "/scripts"
    },
  

  

  

  

  

  

  

  

  

  

  

  

  
    "pings": {
      "title": "Meta: Who to ping",
      "content": "## Meta: Who to ping\n\nWhen an organisation such as Charcoal is maintaining several large projects with many people involved, it can get confusing over who you should ping for help. Welcome to the one-stop shop for all your answers when it comes to getting in contact with the right people.\n\n\n\n### I have a question about how to use SmokeDetector, metasmoke, or one of the userscripts {#question}\n\nJust ask in [Charcoal HQ](http://chat.stackexchange.com/rooms/11540/charcoal-hq)! There are always lots of regulars there willing to answer your questions. We also have a [wiki](https://charcoal-se.org/smokey) for SmokeDetector and the MS API which should answer many of your questions.\n\n\n\n### I have a feature request for one of the projects {#feature-request}\n\nFirst, put your idea out the folks in Charcoal HQ. If there seems to be a general consensus that it sounds like a good idea, make an issue on the appropriate GitHub repository. That way it's easier to track and discuss, and we won't forget about it.\n\n\n\n### I'd like to contact the SmokeDetector maintainers {#smokey-maintainers}\n\nPing whichever of the following people happen to be in the room at the moment: Undo, ArtOfCode, angussidney, Thomas Ward, Andy, tripleee.\n\n\n\n### I'd like to contact the metasmoke maintainers {#ms-maintainers}\n\nPing ArtOfCode or Undo, they do most of the development on metasmoke.\n\n\n\n### I'd like to contact the FDSC maintainers {#fdsc-maintainers}\n\nPing one of the authors of the userscript, ArtOfCode or angussidney.\n\n\n\n### I'd like to contact the AIM maintainers {#aim-maintainers}\n\nPing one of the authors of the userscript, J F or Glorfindel.\n\n\n\n### I'd like to contact the FIRE maintainer {#fire-maintainers}\n\nPing Cerbrus, the author of the userscript.\n\n\n\n### I'd like to contact the author of one of your userscripts {#userscripts}\n\nTake a look at the script's listing on the [userscripts page](/scripts), the main contributors should be listed. Alternatively, look in the source code of the userscript on GitHub, the author's name can be found in the metablock at the top of the file.\n\n\n\n### I'd like to contact one of the maintainers of the website {#site}\n\nJ F, angussidney, and ArtOfCode are the primary authors of the website.\n\n\n\n### I'd like to speak with a moderator about something Charcoal-related {#mods}\n\nIf you find a post that needs moderator attention in general, please just **flag it** on the site. However, if you need to speak to a moderator about something specifically Charcoal-related, [these mods](/pings/mods) should be able to help you.\n\n\n\n### I'd like to get someone's help to translate some possible spam into English {#translation}\n\n[This page](/pings/langs) has a list of people who speak languages other than English.\n\n\n\n### It's dead Jim! {#dead}\n\nFirst of all, check that Smokey isn't responding to any commands. You can also try rebooting Smokey from either SOCVR or Tavern on the Meta, more often than not Smokey has just lost connection to CHQ. Next, check if the instance is still connected to MS [here](https://metasmoke.erwaysoftware.com/status) - if it is, something really bad has happened and you'll need to ask the person who owns the instance to shut it down. In the meantime, you can ask a code admin (`!!/whois code_admin`) to failover a new instance.\n\nIf all else fails, please ping one of the people with a **bold name** on [this list](/people), they will be able to start a backup instance of SmokeDetector.\n\nIf even that fails, panicking is acceptable (but of course, you know where your towel is and will remain calm). Ping ArtOfCode or Undo - they have a few extra tools in metasmoke that may yet be able to resolve the issue.\n\n\n\n### Someone is being disruptive in Charcoal HQ, who can sort the situation out? {#behavior}\n\nPing one of the [Room Owners](http://chat.stackexchange.com/rooms/info/11540/charcoal-hq#room-ownercards), they will calm down the situation and take further action if necessary. If someone has violated SE's Be Nice policy, you can contact any diamond Moderator.\n\n\n\n### I'd like to be added to the privilege whitelist for SmokeDetector {#privileges}\n\nMake sure that you've read the [Privileges](/smokey/Privileges) and [Feedback Guidance pages](/smokey/Feedback-Guidance), then ping one of the [SmokeDetector maintainers](#smokey-maintainers) and they will evaluate your request.\n\n\n\n### I'd like to get further privileges (autoflagging, code access etc), who do I ask? {#more-privileges}\n\nPlease ping an admin: Undo, ArtOfCode, angussidney, Andy, or tripleee.\n\n\n\n### I have a userscript which is useful to the regulars of Charcoal HQ, and I'd like to get it included in the Userscripts repository. How can I get that to happen? {#add-userscript}\n\nPing Undo, ArtOfCode or angussidney, and they will give you push access to the repository to add your US. While you are waiting, you can make a pull request to add the userscript to the repo. Don't forget to leave a message in CHQ to let people know about it!\n\n\n\n### There's some other code that I'd like to contribute, who can I talk to to get it included? {#code}\n\nJust make a pull request to one of our repositories on GitHub, and one of the maintainers will review your code and merge it in. Note that some projects have Continuous Integration (CI) tests that needs to be passed before that can happen.\n\n\n\n### I need to discuss something with the admins privately, how can I contact them? {#private}\n\nPlease email , and it will reach the right people. This also applies to security issues; see [Security](https://charcoal-se.org/security).\n\n",
      "url": "/pings/"
    },
  

  
    "pings-langs-html": {
      "title": "Language Support",
      "content": "# Language Support\n\nCharcoal includes people from around the world.\nIf you're looking for someone who speaks a particular language, please check this list:\n\n* **Arabic**: [M.A.R.](http://stackexchange.com/users/3841881/m-a-r)\n* **Azerbaijani**: [M.A.R.](http://stackexchange.com/users/3841881/m-a-r)\n* **Czech**: [Martin Sleziak](https://stackexchange.com/users/267077/martin-sleziak)\n* **Dutch**: [Glorfindel](http://stackexchange.com/users/6085540/glorfindel), [Ferrybig](https://stackexchange.com/users/1677570/ferrybig), and [rene](https://stackexchange.com/users/281857/rene)\n* **Finnish**: [tripleee](https://stackexchange.com/users/468289/tripleee)\n* **French**: [Kyll](http://stackexchange.com/users/5221606/kyll)\n* **German**: [Magisch](https://stackexchange.com/users/7034529/magisch), [Wrzlprmft](https://stackexchange.com/users/2437491/wrzlprmft), [Glorfindel](http://stackexchange.com/users/6085540/glorfindel), and [rene](https://stackexchange.com/users/281857/rene)\n* **Hebrew**: [Mithrandir](http://stackexchange.com/users/5129611/mithrandir)\n* **Persian**: [M.A.R.](http://stackexchange.com/users/3841881/m-a-r)\n* **Polish**: [Michał Perłakowski](http://stackexchange.com/users/4768421/micha%c5%82-per%c5%82akowski)\n* **Russian**: [D-side](https://stackexchange.com/users/2372500/d-side) and [Nick Volynkin](https://stackexchange.com/users/3318283/nick-volynkin)\n* **Slovak**: [Martin Sleziak](https://stackexchange.com/users/267077/martin-sleziak)\n* **Spanish**: [CalvT](http://stackexchange.com/users/1245478/calvt) and [ArtOfCode](https://stackexchange.com/users/3457374/artofcode)\n* **Swedish**: [Nisse Engström](https://stackexchange.com/users/4252138/nisse-engström) and [tripleee](https://stackexchange.com/users/468289/tripleee)\n* **Turkish**: [M.A.R.](http://stackexchange.com/users/3841881/m-a-r)\n\nIf you're not on this list, please ping `@JF` or another website maintainer in chat\nto get yourself added. \n\n> **Warning**: These people have **not** volunteered for random translation tasks.\n> Please only ask them for help **only** with posts reported by Smokey\n> that a machine translator is having trouble understanding.\n",
      "url": "/pings/langs"
    },
  

  
    "security-html": {
      "title": "security",
      "content": "## Help! I've found a security bug!\nDon't panic, they happen. If you've found a security issue in any Charcoal project, please don't post it publicly\n(including in Charcoal HQ, our chatroom). Instead, email details of the vulnerability to \n[smokey@charcoal-se.org](mailto:smokey@charcoal-se.org), which is a mailing list that will reach the necessary people.\nThey'll have a look and confirm whether or not it's a security issue, and deal with it appropriately.\n\n## Which projects matter most?\nIf you find a security bug in any of the projects in the list below, please let us know as soon as possible - these are \nprojects which are critical to what Charcoal does or to the security of core Charcoal software.\n\n - [Charcoal-SE/aescrypt](https://github.com/Charcoal-SE/aescrypt)\n - Anything to do with [autoflagging](https://charcoal-se.org/flagging)\n - [SmokeDetector](https://github.com/Charcoal-SE/SmokeDetector) itself, particularly anything involving integration\n   or communication with metasmoke\n - [metasmoke](https://github.com/Charcoal-SE/metasmoke)\n",
      "url": "/security"
    },
  

  
    "testing-html": {
      "title": "testing",
      "content": "new announcement\n",
      "url": "/testing"
    },
  
 "": null }
